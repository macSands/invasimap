[{"path":[]},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement sandra@biogis.co.za. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://macsands.github.io/invasimap/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://macsands.github.io/invasimap/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to invasimap","title":"Contributing to invasimap","text":"outlines propose change invasimap. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://macsands.github.io/invasimap/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to invasimap","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://macsands.github.io/invasimap/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to invasimap","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://macsands.github.io/invasimap/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to invasimap","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"macSands/invasimap\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://macsands.github.io/invasimap/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to invasimap","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://macsands.github.io/invasimap/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to invasimap","text":"Please note invasimap project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://macsands.github.io/invasimap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Stellenbosch University Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://macsands.github.io/invasimap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://macsands.github.io/invasimap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"MacFadyen, S. (2025). invasimap: Novel Framework visualise trait dispersion assess species invasiveness site invasibility. R package version 0.0.9. URL: https://github.com/macSands/invasimap.","code":"@Manual{,   title = {invasimap: A Novel Framework to visualise trait dispersion and assess species invasiveness or site invasibility},   author = {Sandra MacFadyen},   organization = {Stellenbosch University},   year = {2025},   note = {R package version 0.0.9},   url = {https://github.com/macSands/invasimap}, }"},{"path":[]},{"path":[]},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_1-introduction","dir":"","previous_headings":"","what":"1. Introduction","title":"invasimap","text":"Biological invasions threaten global biodiversity. Invasive alien species (IAS) can expand rapidly transform ecosystems. invasion dynamics arise multiple drivers, species interactions traits environmental gradients, need rigorous, reproducible workflows diagnose species establish spread. Recent theory, including trait-mediated ecological networks invasion fitness, offers coherent basis integrating traits, environment, biotic interactions (Hui et al., 2016; Hui et al., 2021). invasimap framework, invasion fitness low-density per-capita growth rate invader resident community. low-density condition reflects realistic introduction stage invader rare self-limited, establishment potential depends environmental suitability interspecific interactions. Positive values indicate growth rarity; negative values indicate likely exclusion. aligns mutual invasibility adaptive-dynamics invasion criteria.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"formal-model-and-notation","dir":"","previous_headings":"1. Introduction","what":"Formal model and notation","title":"invasimap","text":"compute invasion fitness invader ii site ss : 𝛌𝐢𝐬=𝐫𝐢𝐬−𝐂𝐢𝐬(raw) \\mathbf{\\lambda_{} \\;=\\; r_{} \\;-\\; C^{\\mathrm{(raw)}}_{}} : Predicted growth potential (intrinsic growth abundance proxy invader ii site ss trait-environment model) :  risr_{}   Total raw competitive penalty :  Cis(raw)=∑j≠iIijs C^{\\mathrm{(raw)}}_{} \\;=\\; \\sum_{j \\neq } I_{ijs} Impact tensor (resident jj invader ii site ss) :  Iijs=αijKe(Δjs;σe)Njs*. I_{ijs} \\;=\\; \\alpha_{ij} \\; K_e(\\Delta_{js}; \\sigma_e) \\; N^{*}_{js}. Competition kernel trait space :  αij=exp(−dij22σt2) \\alpha_{ij} \\;=\\; \\exp\\!\\left(-\\frac{d_{ij}^2}{2\\sigma_t^2}\\right)  dij∈[0,1]d_{ij} \\[0,1] trait dissimilarity (e.g., Gower) σt>0\\sigma_t > 0 trait bandwidth. , generalised trait distance/similarity   gij()g^{\\mathrm{()}}_{ij} calculated pairwise trait relationship (distance, similarity, kernel value, depending kernel choice) species ii jj across entire species set, restricted invader-resident pairs.   Environmental filtering kernel :      Ke(Δjs;σe)=exp(−Δjs22σe2),Δjs=Gower(𝐄s,θj), K_e(\\Delta_{js}; \\sigma_e) \\;=\\; \\exp\\!\\left(-\\frac{\\Delta_{js}^2}{2\\sigma_e^2}\\right), \\quad \\Delta_{js} \\;=\\; \\mathrm{Gower}\\!\\big(\\mathbf{E}_s, \\theta_j\\big),   𝐄s\\mathbf{E}_s site environment vector θj\\theta_j abundance-weighted environmental optimum resident jj.  σe>0\\sigma_e > 0 environmental bandwidth.   resident context, Njs*N^{*}_{js} predicted equilibrium typical abundance resident jj site ss, obtained fitted trait-environment model: Njs*=fenv(𝐄s,θj,𝐳j), N^{*}_{js} \\;=\\; f_{\\text{env}}\\!\\left(\\mathbf{E}_s, \\theta_j, \\mathbf{z}_j\\right),  fenvf_{\\text{env}} denotes fitted response function (e.g., GLMM/GAM), 𝐄s\\mathbf{E}_s site covariates, θj\\theta_j summarizes species-level optima/traits, 𝐳j\\mathbf{z}_j additional predictors.   proportion invaders positive fitness site ss :   Vs=1I∑i𝕀{λis>0} V_s \\;=\\; \\frac{1}{}\\sum_{} \\mathbb{}\\{\\lambda_{} > 0\\} total invasion fitness invader ii across sites :   Ii=∑sλis I_i \\;=\\; \\sum_{s} \\lambda_{} Note: Different summaries can applied - example, VsV_s can mean λis\\lambda_{} species ii, /IiI_i can mean sites sum positive values , depending management emphasis.  ","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_2-overview-of-the-invasimap-r-package-conceptual-workflow","dir":"","previous_headings":"","what":"2. Overview of the invasimap R package conceptual workflow","title":"invasimap","text":"tutorial walks full invasimap workflow quantifying, mapping, interpreting invasion fitness λis\\lambda_{} (fitness$lambda[, s] lambda_mat) ecological communities, raw data actionable visualisations. steps operationalise key ecological concepts: trait centrality (tdp$scores$centrality); trait dispersion (tdp$metrics_df); interaction strength IijsI_{ijs} ($I_raw); competition αij\\alpha_{ij} (comp$a_ij); environmental filtering KeK_e (ek$K_env); summaries invasion fitness λis\\lambda_{} including site-level invasibility VsV_s species-level invasiveness IiI_i. computations use site-level environmental data (site_env), species occurrence abundance (site_spp_pa / site_spp_ab) coordinates (site_xy), species functional traits (spp_trait) parameterise trait–environment–interaction models consistent invasion theory (Hui & Richardson, 2017; Hui et al., 2016, 2021). workflow modular, step implemented targeted functions invasimap: Setup & Dependencies Initialise R environment, load packages, source helper functions, set reproducibility controls. Data Preparation Collect, clean, standardise trait datasets (spp_trait), including automated web-scraping get_trait_data(), merging trait tables, type conversion. Produces standardised trait data frame suitable downstream analyses. Functional Trait Space Characterise species multidimensional trait space compute_trait_space(), calculating: Trait centrality [link TBD] — tdp$scores$centrality via compute_trait_similarity(). Trait dispersion [link TBD] — tdp$metrics_df via compute_trait_dispersion(). Pairwise trait distances dijd_{ij} stored trait_dist comp$d_ij. Trait–Environment Response Fit generalised linear mixed models linking traits environmental covariates: Build GLMM formula build_glmm_formula(). Simulate invader traits simulate_invaders(). Predict intrinsic growth rates risr_{} per site using predict_invader_response(), returning fitness$r_mat. Interaction Strength Estimate pairwise biotic influence potentials: Compute IijsI_{ijs} ($I_raw) dijd_{ij} via compute_interaction_strength(). Store general interaction distances gij()g^{\\mathrm{()}}_{ij} (cis$g_all). Extract resident abundance context Njs*N^{*}_{js} (cis$Nstar). Competition Transform distances competition coefficients αij\\alpha_{ij} using Gaussian trait kernel Kt(dij;σt)K_t(d_{ij};\\sigma_t) bandwidth σt\\sigma_t (comp$sigma_t) via compute_competition_kernel(). Environmental Filtering Quantify match species site environments: Estimate environmental optima θj\\theta_j (ek$env_opt). Compute mismatch Δjs\\Delta_{js} (ek$env_dist) site conditions 𝐄s\\mathbf{E}_s (site_env). Transform environmental weights Ke(Δjs;σe)K_e(\\Delta_{js};\\sigma_e) using bandwidth σe\\sigma_e (ek$sigma_e) via compute_environment_kernel(). Invasion Fitness Computes low-density per-capita growth rates λis\\lambda_{} integrating competition, environmental filtering, intrinsic growth: Matrix assembly — assemble_matrices() collates: Invader-resident competition coefficients αij\\alpha_{ij} Site-resident environmental weights Ke(Δjs;σe)K_e(\\Delta_{js};\\sigma_e) Resident equilibrium abundances Njs*N^{*}_{js} Predicted intrinsic growth rates risr_{} Returns impact tensor IijsI_{ijs} total penalties Cis(raw)C^{\\mathrm{(raw)}}_{} Fitness calculation — compute_invasion_fitness() applies: λis=ris−Cis(raw)\\lambda_{} \\;=\\; r_{} \\;-\\; C^{\\mathrm{(raw)}}_{}, penalty Cis(raw)C^{\\mathrm{(raw)}}_{} sum resident impacts IijsI_{ijs} invader ii site ss. Variants — Optional penalty formulations include richness-scaled (Cis(rich))(C^{\\mathrm{(rich)}}_{}), abundance-weighted (Cis(abun))(C^{\\mathrm{(abun)}}_{}), logistic-capped (Cis(logis))(C^{\\mathrm{(logis)}}_{}). Visualisation & Interpretation Summarise λis\\lambda_{} : Invasibility VsV_s (summary$Vs): mean proportion positive λis\\lambda_{} invaders site ss. Invasiveness IiI_i (summary$Ii): mean sum λis\\lambda_{} sites species ii. Optional trait-level invasiveness summaries. Note: module can run independently inputs available, sequentially reproduce full pipeline data acquisition invasion fitness mapping.  ","code":""},{"path":[]},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_1-install-and-load-invasimap","dir":"","previous_headings":"","what":"1. Install and load invasimap","title":"invasimap","text":"Install load invasimap package GitHub, ensuring functions available use workflow.","code":"# # install remotes if needed # install.packages(\"remotes\") # remotes::install_github(\"macSands/invasimap\")  # Ensure the package is loaded when knitting library(invasimap) sessionInfo()$otherPkgs$invasimap$Version  # Make sure all the functions are loaded devtools::load_all() # alternative during local development"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_2-load-other-r-libraries","dir":"","previous_headings":"","what":"2. Load other R libraries","title":"invasimap","text":"Load core libraries spatial processing, biodiversity modelling, visualization required across invasimap analysis pipeline.","code":"# Load essential packages # library(tidyverse) # --- Data Wrangling and Manipulation --- library(dplyr) # Tidy data manipulation verbs (mutate, select, filter, etc.) library(tidyr) # Reshape data (wide ↔ long, pivot functions) library(tibble) # Modern lightweight data frames (tibble objects) library(purrr) # Functional iteration (map(), etc.)  # --- String and Factor Utilities --- library(stringr) # String pattern matching and manipulation (str_detect, etc.) library(fastDummies) # Quickly create dummy/one-hot variables for factors  # --- Data Visualization --- library(ggplot2) # Grammar-of-graphics plotting library(viridis) # Colorblind-friendly palettes for ggplot2 # library(lattice)     # Trellis (multi-panel) graphics library(factoextra) # Visualize clustering and multivariate analyses, fviz_nbclust / silhouettes # library(RColorBrewer)  # --- Spatial Data --- library(sf) # Handling and plotting spatial vector data (simple features) library(terra) # Raster and spatial data operations  # --- Statistical and Ecological Modelling --- library(glmmTMB) # Fit GLMMs (Generalized Linear Mixed Models), e.g., Tweedie, NB, Poisson library(MASS) # Statistical functions and kernel density estimation (kde2d, etc.) library(cluster) # Clustering algorithms, Gower distance, diagnostics # library(vegan)       # Community ecology, ordination (PCoA, diversity metrics) library(geometry) # Convex hulls, volumes, and related geometry calculations library(ClustGeo) # for spatially constrained clustering  # --- Model Performance and Diagnostics --- # library(performance) # Model checking, diagnostics, and performance metrics # options(warn = -1)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_3-data-access-and-preparation-using-dissmapr","dir":"","previous_headings":"","what":"3. Data access and preparation using dissmapr","title":"invasimap","text":"acquire prepare species occurrence data biodiversity modelling using dissmapr package, series modular functions streamline workflow raw observations spatially aligned environmental predictors.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_31-install-dissmapr","dir":"","previous_headings":"3. Data access and preparation using dissmapr","what":"3.1. Install dissmapr","title":"invasimap","text":"Install load dissmapr package GitHub, ensuring functions available use workflow.","code":"# # install remotes if needed # install.packages(\"remotes\") # remotes::install_github(\"macSands/dissmapr\")  # Ensure the package is loaded library(dissmapr) sessionInfo()$otherPkgs$dissmapr$Version #> [1] \"0.1.0\""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_32-import-and-harmonise-biodiversity-occurrence-data","dir":"","previous_headings":"3. Data access and preparation using dissmapr","what":"3.2. Import and harmonise biodiversity-occurrence data","title":"invasimap","text":"process begins dissmapr::get_occurrence_data(), imports biodiversity records, GBIF butterfly dataset South Africa, harmonizes standardised formats. Input sources can include local CSV files, URLs, zipped GBIF downloads. function filters data taxon region, returning raw records site--species matrices presence-absence abundance form.","code":"# Use local GBIF data bfly_data <- dissmapr::get_occurrence_data(   data = system.file(\"extdata\", \"gbif_butterflies.csv\", package = \"invasimap\"),   source_type = \"local_csv\",   sep = \"\\t\" )  # Check results but only a subset of columns to fit in console dim(bfly_data) #> [1] 81825    52 # str(bfly_data[,c(51,52,22,23,1,14,16,17,30)]) head(bfly_data[, c(51, 52, 22, 23, 1, 14, 16, 17, 30)]) #>   site_id pa         y        x    gbifID             verbatimScientificName #> 1       1  1 -34.42086 19.24410 923051749                   Pieris brassicae #> 2       2  1 -33.96044 18.75564 922985630                   Pieris brassicae #> 3       3  1 -33.91651 18.40321 922619348 Papilio demodocus subsp. demodocus #> 4       1  1 -34.42086 19.24410 922426210 Mylothris agathina subsp. agathina #> 5       4  1 -34.35024 18.47488 921650584                  Eutricha capensis #> 6       5  1 -33.58570 25.65097 921485695            Drepanogynis bifasciata #>   countryCode                                          locality #> 1          ZA                                          Hermanus #> 2          ZA                                   Polkadraai Road #> 3          ZA                                       Signal Hill #> 4          ZA                                          Hermanus #> 5          ZA Cape of Good Hope / Cape Point Area, South Africa #> 6          ZA                             Kudu Ridge Game Lodge #>          eventDate #> 1 2012-10-13T00:00 #> 2 2012-11-01T00:00 #> 3 2012-10-31T00:00 #> 4 2012-10-13T00:00 #> 5 2012-10-30T00:00 #> 6 2012-10-23T00:00  # Use local data loaded into the environment as a data.frame # local_df = read.csv(system.file(\"extdata\", \"site_species.csv\", package = \"dissmapr\") # head(local_df) # bfly_data = get_occurrence_data( #   data = local_df, #   source_type = 'data_frame')  # # Use local .csv file in `invasimap` package # bfly_data = get_occurrence_data( #   data = system.file(\"extdata\", \"site_species.csv\", package = \"invasimap\"), #   source_type = 'local_csv') # # # Check results but only a subset of columns to fit in console # dim(bfly_data) # # str(bfly_data) # head(bfly_data)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_33-format-biodiversity-records-to-longwide-formats","dir":"","previous_headings":"3. Data access and preparation using dissmapr","what":"3.3. Format biodiversity records to long/wide formats","title":"invasimap","text":"Next, dissmapr::format_df() restructures raw records tidy long wide formats. assigns unique site IDs, extracts key fields (coordinates, species names, observation values), prepares two main outputs: site_obs (long format mapping) site_spp (wide format species-level analysis).","code":"# Continue from GBIF data bfly_result <- dissmapr::format_df(   data        = bfly_data, # A `data.frame` of biodiversity records   species_col = \"verbatimScientificName\", # Name of species column (required for `\"long\"`)   value_col   = \"pa\", # Name of value column (e.g. presence/abundance; for `\"long\"`)   extra_cols  = NULL, # Character vector of other columns to keep   format      = \"long\" # Either`\"long\"` or `\"wide\"` )  # # Continue using local data # bfly_result = dissmapr::format_df( #   data        = bfly_data, # A `data.frame` of biodiversity records #   species_col = 'sp_name', # Name of species column (required for `\"long\"`) #   value_col   = 'count' # Name of value column (e.g. presence/abundance; for `\"long\"`) #   )  # Check `bfly_result` structure str(bfly_result, max.level = 1) #> List of 2 #>  $ site_obs:'data.frame':    79953 obs. of  5 variables: #>  $ site_spp: tibble [56,090 × 2,871] (S3: tbl_df/tbl/data.frame)  # Optional: Create new objects from list items site_obs <- bfly_result$site_obs site_spp <- bfly_result$site_spp  # Check results dim(site_obs) #> [1] 79953     5 head(site_obs) #>   site_id        x         y                            species value #> 1       1 19.24410 -34.42086                   Pieris brassicae     1 #> 2       2 18.75564 -33.96044                   Pieris brassicae     1 #> 3       3 18.40321 -33.91651 Papilio demodocus subsp. demodocus     1 #> 4       1 19.24410 -34.42086 Mylothris agathina subsp. agathina     1 #> 5       4 18.47488 -34.35024                  Eutricha capensis     1 #> 6       5 25.65097 -33.58570            Drepanogynis bifasciata     1  dim(site_spp) #> [1] 56090  2871 head(site_spp[, 1:6]) #> # A tibble: 6 × 6 #>   site_id     x     y `Mylothris agathina subsp. agathina` `Pieris brassicae` #>     <int> <dbl> <dbl>                                <dbl>              <dbl> #> 1       1  19.2 -34.4                                    1                  1 #> 2       2  18.8 -34.0                                    0                  1 #> 3       3  18.4 -33.9                                    0                  0 #> 4       4  18.5 -34.4                                    0                  0 #> 5       5  25.7 -33.6                                    0                  0 #> 6       6  22.2 -33.6                                    0                  0 #> # ℹ 1 more variable: `Tarucus thespis` <dbl>  #### Get parameters from processed data to use later # Number of species (n_sp <- dim(site_spp)[2] - 3) #> [1] 2868  # Species names sp_cols <- names(site_spp)[-c(1:3)] sp_cols[1:10] #>  [1] \"Mylothris agathina subsp. agathina\" \"Pieris brassicae\"                   #>  [3] \"Tarucus thespis\"                    \"Acraea horta\"                       #>  [5] \"Danaus chrysippus\"                  \"Papilio demodocus subsp. demodocus\" #>  [7] \"Eutricha capensis\"                  \"Mesocelis monticola\"                #>  [9] \"Vanessa cardui\"                     \"Cuneisigna obstans\""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_34-generate-spatial-grid-and-gridded-summaries","dir":"","previous_headings":"3. Data access and preparation using dissmapr","what":"3.4. Generate spatial grid and gridded summaries","title":"invasimap","text":"integrate data spatially, dissmapr::generate_grid() overlays user-defined spatial lattice (e.g. 0.5° grid), aggregates biodiversity observations per grid cell, computes standardised metrics species richness observation effort. Outputs include gridded species matrices (grid_spp, grid_spp_pa), spatial polygon (grid_sf), raster layers (grid_r), enabling downstream spatial modelling.","code":"# 1. Load the national boundary rsa <- sf::st_read(system.file(\"extdata\", \"rsa.shp\", package = \"invasimap\")) #> Reading layer `rsa' from data source  #>   `D:\\Methods\\R\\myR_Packages\\cleanVersions\\invasimap\\inst\\extdata\\rsa.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 11 features and 8 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 16.45189 ymin: -34.83417 xmax: 32.94498 ymax: -22.12503 #> Geodetic CRS:  WGS 84  # 2. Choose a working resolution res <- 0.5 # decimal degrees° (≈ 55 km at the equator)  # 3. Convert the AoI to a 'terra' vector rsa_vect <- terra::vect(rsa)  # 4. Initialise a blank raster template grid <- terra::rast(rsa_vect, resolution = res, crs = terra::crs(rsa_vect))  # 5. Populate the raster with placeholder values terra::values(grid) <- 1  # 6. Clip the raster to the AoI grid_masked <- terra::mask(grid, rsa_vect)  # 7. Generate a 0.5° grid summary for the point dataset `site_spp` grid_list <- dissmapr::generate_grid(   data          = site_spp, # point data with x/y + species columns   x_col         = \"x\", # longitude column   y_col         = \"y\", # latitude  column   grid_size     = 0.5, # cell size in degrees   sum_cols      = 4:ncol(site_spp), # columns to aggregate * could also use `names(site_spp)[4:ncol(site_spp)]`   crs_epsg      = 4326 # WGS84 )  # Inspect the returned list str(grid_list, max.level = 1) #> List of 4 #>  $ grid_r     :S4 class 'SpatRaster' [package \"terra\"] #>  $ grid_sf    :Classes 'sf' and 'data.frame':    1110 obs. of  8 variables: #>   ..- attr(*, \"sf_column\")= chr \"geometry\" #>   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA #>   .. ..- attr(*, \"names\")= chr [1:7] \"centroid_lon\" \"centroid_lat\" \"grid_id\" \"mapsheet\" ... #>  $ grid_spp   : tibble [415 × 2,874] (S3: tbl_df/tbl/data.frame) #>  $ grid_spp_pa: tibble [415 × 2,874] (S3: tbl_df/tbl/data.frame)  # (Optional) Promote list items to named objects grid_r <- grid_list$grid_r$grid_id # raster grid_sf <- grid_list$grid_sf # polygons for mapping or joins grid_spp <- grid_list$grid_spp # tabular summary per cell grid_spp_pa <- grid_list$grid_spp_pa # presence/absence summary  # Quick checks dim(grid_sf) # ; head(grid_sf) #> [1] 1110    8 dim(grid_spp) # ; head(grid_spp[, 1:8]) #> [1]  415 2874 dim(grid_spp_pa) # ; head(grid_spp_pa[, 1:8]) #> [1]  415 2874  # 1. Extract & stretch the layers effRich_r <- sqrt(grid_list$grid_r[[c(\"obs_sum\", \"spp_rich\")]])  # 2. Open a 1×2 layout and plot each layer + outline old_par <- par(   mfrow = c(1, 2), # multi‐figure by row: 1 row and 2 columns   mar = c(1, 1, 1, 2) ) # margins sizes: bottom (1 lines)|left (1)|top (1)|right (2)  for (i in 1:2) {   plot(effRich_r[[i]],     col = viridisLite::turbo(100),     colNA = NA,     axes = FALSE,     main = c(       \"Sampling effort (√obs count)\",       \"Species richness (√unique count)\"     )[i],     cex.main = 0.8   ) # ← smaller title)   plot(terra::vect(rsa), add = TRUE, border = \"black\", lwd = 0.4) } par(old_par) # reset plotting parameters"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_35-retrieve-crop-resample-and-link-environmental-rasters-to-sampling-sites","dir":"","previous_headings":"3. Data access and preparation using dissmapr","what":"3.5. Retrieve, crop, resample, and link environmental rasters to sampling sites","title":"invasimap","text":"Environmental predictors appended using dissmapr::get_enviro_data(), buffers grid, downloads raster data (e.g. WorldClim bioclimatic variables), resamples , links values grid-cell centroids. produces site--environment data frame (env_df) SpatRaster object (env_r), aligning biological environmental data. Begin reading predefined target species list, filter site--species dataset (grid_spp) retain relevant species observations, reshape data analysis. produces filtered long-format dataset (grid_obs) cleaned wide-format site--species matrix (grid_spp). proceed retrieve process environmental data using dissmapr::get_enviro_data(). example , 19 bioclimatic variables downloaded WorldClim v2.1 (≈10 km resolution) site centroids grid_spp dataset. performs following steps: Retrieves WorldClim “bio” variables via geodata interface. Buffers area interest (AOI) 10 km. Retains site-level metadata (obs_sum, spp_rich) excludes species columns.","code":"# Read in target species list species <- read.csv(system.file(\"extdata\",   \"rsa_butterfly_species_names_n27_100plus.csv\",   package = \"invasimap\" ), stringsAsFactors = FALSE)$species  # Filter `grid_spp` and convert to long-format grid_obs <- grid_spp %>%   dplyr::select(-mapsheet) %>% # Drop mapsheet metadata   pivot_longer(     cols = -c(grid_id, centroid_lon, centroid_lat, obs_sum, spp_rich), # Keep core metadata columns only     names_to = \"species\",     values_to = \"count\",     values_drop_na = TRUE   ) %>%   filter(     # obs_sum > 100,                                   # Only high-observation sites     count > 0, # Remove absent species     species %in% !!species # Keep only target species   ) %>%   rename(     site_id = grid_id, # Change 'grid_id' to 'site_id'     x = centroid_lon, # Change 'centroid_lon' to 'x'     y = centroid_lat # Change 'centroid_lat' to 'y'   ) %>%   relocate(site_id, x, y, obs_sum, spp_rich, species, count)  dim(grid_obs) #> [1] 1737    7 head(grid_obs) #> # A tibble: 6 × 7 #>   site_id     x     y obs_sum spp_rich species                    count #>   <chr>   <dbl> <dbl>   <dbl>    <dbl> <chr>                      <dbl> #> 1 1027     29.2 -22.3      41       31 Utetheisa pulchella            1 #> 2 1029     30.3 -22.3       7        7 Danaus chrysippus orientis     1 #> 3 1029     30.3 -22.3       7        7 Telchinia serena               1 #> 4 1031     31.3 -22.3     107       76 Vanessa cardui                 1 #> 5 1031     31.3 -22.3     107       76 Utetheisa pulchella            2 #> 6 1031     31.3 -22.3     107       76 Hypolimnas misippus            2 length(unique(grid_obs$species)) #> [1] 27 length(unique(grid_obs$site_id)) #> [1] 314  # Reshape site-by-species matrix to wide format and clean grid_spp <- grid_obs %>%   pivot_wider(     names_from = species,     values_from = count,     values_fill = 0 # Replace missing counts with 0   )  dim(grid_spp) #> [1] 314  32 # head(grid_spp) # Retrieve 19 bioclim layers (≈10-km, WorldClim v2.1) for all grid centroids data_path <- \"inst/extdata\" # cache folder for rasters enviro_list <- dissmapr::get_enviro_data(   data       = grid_spp, # centroids + obs_sum + spp_rich   buffer_km  = 10, # pad the AOI slightly   source     = \"geodata\", # WorldClim/SoilGrids interface   var        = \"bio\", # bioclim variable set   res        = 5, # 5-arc-min ≈ 10 km   grid_r     = grid_r, # To set resampling resolution, if necessary   path       = data_path,   sp_cols    = 7:ncol(grid_spp), # ignore species columns   ext_cols   = c(\"obs_sum\", \"spp_rich\") # carry effort & richness through )  # Quick checks str(enviro_list, max.level = 1) #> List of 3 #>  $ env_rast:S4 class 'SpatRaster' [package \"terra\"] #>  $ sites_sf: sf [314 × 2] (S3: sf/tbl_df/tbl/data.frame) #>   ..- attr(*, \"sf_column\")= chr \"geometry\" #>   ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA #>   .. ..- attr(*, \"names\")= chr \"site_id\" #>  $ env_df  : tibble [314 × 24] (S3: tbl_df/tbl/data.frame)  # (Optional) Assign concise layer names for readability # Find names here https://www.worldclim.org/data/bioclim.html names_env <- c(   \"temp_mean\", \"mdr\", \"iso\", \"temp_sea\", \"temp_max\", \"temp_min\",   \"temp_range\", \"temp_wetQ\", \"temp_dryQ\", \"temp_warmQ\",   \"temp_coldQ\", \"rain_mean\", \"rain_wet\", \"rain_dry\",   \"rain_sea\", \"rain_wetQ\", \"rain_dryQ\", \"rain_warmQ\", \"rain_coldQ\" ) names(enviro_list$env_rast) <- names_env  # (Optional) Promote frequently-used objects env_r <- enviro_list$env_rast # cropped climate stack env_df <- enviro_list$env_df # site × environment data-frame  # Quick checks env_r #> class       : SpatRaster  #> size        : 30, 37, 19  (nrow, ncol, nlyr) #> resolution  : 0.5, 0.5  (x, y) #> extent      : 15.5, 34, -36, -21  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> names       : temp_mean,       mdr,      iso, temp_sea, temp_max,  temp_min, ...  #> min values  :  9.779773,  8.977007, 47.10606, 228.9986, 19.92147, -4.110302, ...  #> max values  : 24.406433, 18.352308, 64.92966, 653.4167, 36.19497, 12.005042, ... dim(env_df) #> [1] 314  24 head(env_df) #> # A tibble: 6 × 24 #>   site_id     x     y bio01 bio02 bio03 bio04 bio05 bio06 bio07 bio08 bio09 #>   <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 1027     29.2 -22.3  21.8 14.5   55.1  430.  32.6  6.30  26.3  26.2  15.9 #> 2 1029     30.3 -22.3  22.8 13.9   58.0  359.  32.7  8.79  23.9  26.5  17.8 #> 3 1031     31.3 -22.3  24.2 14.2   61.3  326.  34.2 10.9   23.2  27.5  19.7 #> 4 117      18.2 -34.3  20.2 11.8   56.8  317.  29.8  9.29  20.5  19.9  19.8 #> 5 118      18.7 -34.3  16.2  9.28  52.3  309.  25.4  7.65  17.7  12.4  19.8 #> 6 119      19.3 -34.3  15.8 10.2   53.5  321.  25.8  6.67  19.2  11.8  19.6 #> # ℹ 12 more variables: bio10 <dbl>, bio11 <dbl>, bio12 <dbl>, bio13 <dbl>, #> #   bio14 <dbl>, bio15 <dbl>, bio16 <dbl>, bio17 <dbl>, bio18 <dbl>, #> #   bio19 <dbl>, obs_sum <dbl>, spp_rich <dbl>  # Build the final site × environment table grid_env <- env_df %>%   dplyr::select(     site_id, x, y,     obs_sum, spp_rich, dplyr::everything()   ) %>%   mutate(across(     .cols = -c(site_id, x, y, obs_sum, spp_rich), # all other columns     .fns = ~ as.numeric(scale(.x)), # Scale bio     .names = \"{.col}\" # keep same names   ))  str(grid_env, max.level = 1) #> tibble [314 × 24] (S3: tbl_df/tbl/data.frame) head(grid_env) #> # A tibble: 6 × 24 #>   site_id     x     y obs_sum spp_rich  bio01   bio02  bio03  bio04  bio05 bio06 #>   <chr>   <dbl> <dbl>   <dbl>    <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl> <dbl> #> 1 1027     29.2 -22.3      41       31  1.75   0.274  -0.309  0.272  1.24  0.605 #> 2 1029     30.3 -22.3       7        7  2.20  -0.0315  0.616 -0.450  1.27  1.28  #> 3 1031     31.3 -22.3     107       76  2.78   0.150   1.68  -0.792  1.79  1.87  #> 4 117      18.2 -34.3    4246      231  1.08  -1.05    0.236 -0.883  0.241 1.42  #> 5 118      18.7 -34.3    2202      215 -0.628 -2.25   -1.21  -0.975 -1.30  0.973 #> 6 119      19.3 -34.3     989      173 -0.799 -1.79   -0.838 -0.842 -1.15  0.706 #> # ℹ 13 more variables: bio07 <dbl>, bio08 <dbl>, bio09 <dbl>, bio10 <dbl>, #> #   bio11 <dbl>, bio12 <dbl>, bio13 <dbl>, bio14 <dbl>, bio15 <dbl>, #> #   bio16 <dbl>, bio17 <dbl>, bio18 <dbl>, bio19 <dbl>"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_36-remove-highly-correlated-predictors-optional","dir":"","previous_headings":"3. Data access and preparation using dissmapr","what":"3.6. Remove highly correlated predictors (optional)","title":"invasimap","text":"Finally, dissmapr::rm_correlated() optionally reduces multicollinearity filtering highly correlated predictors based threshold (e.g. r > 0.70), improving model stability interpretability. Together, functions provide reproducible scalable pipeline preparing ecological datasets spatial analysis.","code":"# # (Optional) Rename BIO # names(env_df) = c(\"grid_id\", \"centroid_lon\", \"centroid_lat\", names_env, \"obs_sum\", \"spp_rich\") # # # Run the filter and compare dimensions # # Filter environmental predictors for |r| > 0.70 # env_vars_reduced = dissmapr::rm_correlated( #   data       = env_df[, 4:23],  # drop ID + coord columns #   cols       = NULL,                  # infer all numeric cols #   threshold  = 0.70, #   plot       = TRUE                   # show heat-map of retained vars # ) # # # Before vs after # c(original = ncol(env_df[, c(4, 6:24)]), #   reduced  = ncol(env_vars_reduced))"},{"path":[]},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_41-retrieve-and-link-trait-and-metadata-for-each-species","dir":"","previous_headings":"4. Data access and preparation using invasimap","what":"4.1. Retrieve and link trait and metadata for each species","title":"invasimap","text":"utility provides automated pipeline extracting joining biological trait data rich metadata focal species. function integrates several steps: Trait Table Lookup: Retrieves species’ trait data local trait table (CSV) TRY-style database, using fuzzy matching ensure robust linkage even minor naming inconsistencies. Wikipedia Metadata Scraping: Optionally augments species entry taxonomic summary, higher taxonomy, representative images scraped directly Wikipedia. Image-based Color Palette Extraction: enabled, downloads processes public domain images extract frequent colors, optionally removing green/white backgrounds focus diagnostic features. Flexible Output: Returns single-row tibble species name, trait data, taxonomic metadata, image URL, color palette - harmonized downstream analyses visualization. function greatly simplifies assembly unified species-trait-metadata table, essential trait-based community ecology, macroecology, biodiversity informatics projects.","code":"# # Local trait data.frame version 1 # btfly_traits1 = read.csv(system.file(\"extdata\", \"Middleton_etal_2020_traits.csv\", package = \"invasimap\")) # str(btfly_traits1) # length(unique(btfly_traits1$Species)) # # # Github trait data.frame # git_url = \"https://raw.githubusercontent.com/RiesLabGU/LepTraits/main/consensus/consensus.csv\" # # Make sure inst/extdata exists then define destination # dir.create(\"inst/extdata\", recursive = TRUE, showWarnings = FALSE) # destfile = file.path(\"inst\", \"extdata\", \"consensus.csv\") # # # Download the raw CSV # download.file( #   url = git_url, #   destfile = destfile, #   mode = \"wb\"    # important on Windows # ) # # # 4. Read it from disk # btfly_traits2 = read.csv(destfile, stringsAsFactors = FALSE) # str(btfly_traits2) # length(unique(btfly_traits2$Species)) # # # Retrieve and join trait/metadata for all species in the observation set # spp_traits = purrr::map_dfr( #   unique(grid_obs$species), #   ~get_trait_data( #     species = .x, #     remove_bg = FALSE, #     n_palette = 5, #     preview = FALSE, #     save_folder = NULL, #     do_summary = TRUE, #     do_taxonomy = TRUE, #     do_image = TRUE, #     do_palette = TRUE, #     use_try = FALSE, #     try_data = NULL, #     # local_trait_df = btfly_traits1, #     local_trait_df = btfly_traits2, #     local_species_col = 'Species', #     # github_url = git_url, #     max_dist = 1 #   ) # )  # Local trait data.frame version 2 btfly_traits3 <- read.csv(system.file(\"extdata\", \"species_traits.csv\", package = \"invasimap\")) # btfly_traits3 = read.csv(system.file(\"extdata\", \"species_traits_sim.csv\", package = \"invasimap\")) str(btfly_traits3) #> 'data.frame':    27 obs. of  21 variables: #>  $ species     : chr  \"Acraea horta\" \"Amata cerbera\" \"Bicyclus safitza safitza\" \"Cacyreus lingeus\" ... #>  $ trait_cont1 : num  0.83 0.874 -0.428 0.661 0.283 ... #>  $ trait_cont2 : num  0.811 -0.106 0.672 0.475 0.622 ... #>  $ trait_cont3 : num  -0.922 0.498 0.355 -0.657 -0.478 ... #>  $ trait_cont4 : num  -0.684 -0.282 0.291 0.552 0.127 ... #>  $ trait_cont5 : num  0.0715 -0.9955 0.2179 0.6736 0.503 ... #>  $ trait_cont6 : num  0.16 0.643 -0.773 0.529 0.247 ... #>  $ trait_cont7 : num  0.2035 -0.606 0.0705 -0.6409 -0.0962 ... #>  $ trait_cont8 : num  -0.425 -0.611 0.568 -0.742 -0.742 ... #>  $ trait_cont9 : num  0.1493 -0.2933 0.0949 0.7854 -0.02 ... #>  $ trait_cont10: num  -0.5772 0.0992 -0.036 -0.6811 -0.7008 ... #>  $ trait_cat11 : chr  \"wetland\" \"forest\" \"wetland\" \"wetland\" ... #>  $ trait_cat12 : chr  \"diurnal\" \"nocturnal\" \"diurnal\" \"nocturnal\" ... #>  $ trait_cat13 : chr  \"bivoltine\" \"multivoltine\" \"univoltine\" \"multivoltine\" ... #>  $ trait_cat14 : chr  \"detritivore\" \"detritivore\" \"generalist\" \"nectarivore\" ... #>  $ trait_cat15 : chr  \"migratory\" \"resident\" \"resident\" \"migratory\" ... #>  $ trait_ord16 : int  4 1 4 3 4 1 1 4 1 1 ... #>  $ trait_ord17 : int  1 4 4 3 2 4 3 5 4 3 ... #>  $ trait_bin18 : int  1 1 1 0 1 1 1 1 0 0 ... #>  $ trait_bin19 : int  1 0 1 0 0 1 1 1 0 1 ... #>  $ trait_ord20 : chr  \"medium\" \"large\" \"medium\" \"medium\" ... # length(unique(btfly_traits3$species))  # Retrieve and join trait/metadata for all species in the observation set spp_traits <- purrr::map_dfr(   unique(grid_obs$species),   ~ get_trait_data(     species = .x,     n_palette = 5,     preview = FALSE,     do_summary = TRUE,     do_taxonomy = TRUE,     do_image = TRUE,     do_palette = TRUE,     local_trait_df = btfly_traits3,     local_species_col = \"species\",     max_dist = 1   ) ) # The final output combines trait data, taxonomic info, Wikipedia summary, images, and color palette for each species. # This integrated dataset supports multi-faceted biodiversity, trait, and visualization analyses.  str(spp_traits) #> tibble [27 × 29] (S3: tbl_df/tbl/data.frame) #>  $ species     : chr [1:27] \"Utetheisa pulchella\" \"Danaus chrysippus orientis\" \"Telchinia serena\" \"Vanessa cardui\" ... #>  $ summary     : chr [1:27] \"Utetheisa pulchella, the crimson-speckled flunkey, crimson-speckled footman, or crimson-speckled moth, is a mot\"| __truncated__ NA \"Acraea serena, the dancing acraea, is a butterfly of the family Nymphalidae. It is found throughout Africa sout\"| __truncated__ \"Vanessa cardui is the most widespread of all butterfly species. It is commonly called the painted lady, or form\"| __truncated__ ... #>  $ Kingdom     : Named chr [1:27] \"Animalia\" NA \"Animalia\" \"Animalia\" ... #>   ..- attr(*, \"names\")= chr [1:27] \"Kingdom\" \"Kingdom\" \"Kingdom\" \"Kingdom\" ... #>  $ Phylum      : Named chr [1:27] \"Arthropoda\" NA \"Arthropoda\" \"Arthropoda\" ... #>   ..- attr(*, \"names\")= chr [1:27] \"Phylum\" \"Phylum\" \"Phylum\" \"Phylum\" ... #>  $ Class       : Named chr [1:27] \"Insecta\" NA \"Insecta\" \"Insecta\" ... #>   ..- attr(*, \"names\")= chr [1:27] \"Class\" \"Class\" \"Class\" \"Class\" ... #>  $ Order       : Named chr [1:27] \"Lepidoptera\" NA \"Lepidoptera\" \"Lepidoptera\" ... #>   ..- attr(*, \"names\")= chr [1:27] \"Order\" \"Order\" \"Order\" \"Order\" ... #>  $ Family      : Named chr [1:27] \"Erebidae\" NA \"Nymphalidae\" \"Nymphalidae\" ... #>   ..- attr(*, \"names\")= chr [1:27] \"Family\" \"Family\" \"Family\" \"Family\" ... #>  $ img_url     : chr [1:27] \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a6/Arctiidae_-_Utetheisa_pulchella.JPG/250px-Arctiidae_-\"| __truncated__ NA \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Dancing_acraea_%28Acraea_serena%29_underside_Maputo.j\"| __truncated__ \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/0_Belle-dame_%28Vanessa_cardui%29_-_Echinacea_purpure\"| __truncated__ ... #>  $ palette     : chr [1:27] \"#535509, #A59A47, #8C8012, #1D220C, #CCBF98\" NA \"#9C9C6D, #86885D, #E8E6CE, #534832, #B4862D\" \"#CC8242, #EA8FD3, #3A311F, #C65D9B, #6A5C42\" ... #>  $ trait_cont1 : num [1:27] 0.0284 0.0382 -0.8351 -0.2196 0.314 ... #>  $ trait_cont2 : num [1:27] -0.203 -0.224 -0.307 0.569 0.666 ... #>  $ trait_cont3 : num [1:27] -0.9969 0.0288 0.0288 0.1632 0.5191 ... #>  $ trait_cont4 : num [1:27] 0.48 -0.533 0.925 0.466 -0.39 ... #>  $ trait_cont5 : num [1:27] 0.8748 -0.0945 0.263 0.701 -0.9972 ... #>  $ trait_cont6 : num [1:27] 0.87 -0.703 0.36 0.101 0.559 ... #>  $ trait_cont7 : num [1:27] 0.586 -0.366 0.836 -0.733 0.459 ... #>  $ trait_cont8 : num [1:27] -0.0974 -0.8555 -0.8781 0.6775 -0.7754 ... #>  $ trait_cont9 : num [1:27] 0.123 -0.657 -0.865 -0.859 -0.373 ... #>  $ trait_cont10: num [1:27] 0.85009 -0.00145 -0.5899 0.77351 -0.62313 ... #>  $ trait_cat11 : chr [1:27] \"wetland\" \"grassland\" \"forest\" \"forest\" ... #>  $ trait_cat12 : chr [1:27] \"diurnal\" \"diurnal\" \"nocturnal\" \"diurnal\" ... #>  $ trait_cat13 : chr [1:27] \"multivoltine\" \"univoltine\" \"multivoltine\" \"univoltine\" ... #>  $ trait_cat14 : chr [1:27] \"detritivore\" \"detritivore\" \"generalist\" \"generalist\" ... #>  $ trait_cat15 : chr [1:27] \"migratory\" \"migratory\" \"migratory\" \"resident\" ... #>  $ trait_ord16 : int [1:27] 3 1 2 3 1 1 4 4 2 2 ... #>  $ trait_ord17 : int [1:27] 4 4 5 3 4 2 1 5 2 5 ... #>  $ trait_bin18 : int [1:27] 1 1 1 0 0 0 1 1 0 0 ... #>  $ trait_bin19 : int [1:27] 1 1 1 0 0 0 1 1 1 1 ... #>  $ trait_ord20 : chr [1:27] \"small\" \"medium\" \"large\" \"large\" ... head(spp_traits) #> # A tibble: 6 × 29 #>   species  summary Kingdom Phylum Class Order Family img_url palette trait_cont1 #>   <chr>    <chr>   <chr>   <chr>  <chr> <chr> <chr>  <chr>   <chr>         <dbl> #> 1 Utethei… Utethe… Animal… Arthr… Inse… Lepi… Erebi… https:… #53550…      0.0284 #> 2 Danaus … <NA>    <NA>    <NA>   <NA>  <NA>  <NA>   <NA>    <NA>         0.0382 #> 3 Telchin… Acraea… Animal… Arthr… Inse… Lepi… Nymph… https:… #9C9C6…     -0.835  #> 4 Vanessa… Vaness… Animal… Arthr… Inse… Lepi… Nymph… https:… #CC824…     -0.220  #> 5 Hypolim… Hypoli… Animal… Arthr… Inse… Lepi… Nymph… https:… #B2A79…      0.314  #> 6 Pieris … Pieris… Animal… Arthr… Inse… Lepi… Pieri… https:… #515A2…     -0.765  #> # ℹ 19 more variables: trait_cont2 <dbl>, trait_cont3 <dbl>, trait_cont4 <dbl>, #> #   trait_cont5 <dbl>, trait_cont6 <dbl>, trait_cont7 <dbl>, trait_cont8 <dbl>, #> #   trait_cont9 <dbl>, trait_cont10 <dbl>, trait_cat11 <chr>, #> #   trait_cat12 <chr>, trait_cat13 <chr>, trait_cat14 <chr>, trait_cat15 <chr>, #> #   trait_ord16 <int>, trait_ord17 <int>, trait_bin18 <int>, trait_bin19 <int>, #> #   trait_ord20 <chr>  # Count how many non‐NA IDs length(unique(btfly_traits3$species)) #> [1] 27 length(unique(grid_obs$species)) #> [1] 27 sum(!is.na(spp_traits$species)) #> [1] 27"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_42-alternatively-load-local-combined-site-environment-and-trait-data","dir":"","previous_headings":"4. Data access and preparation using invasimap","what":"4.2. Alternatively, load local combined site, environment, and trait data","title":"invasimap","text":"","code":"# Read GBIF species occurrence with simulated traits and enviro data (one row per site-species combination) site_env_spp <- read.csv(system.file(\"extdata\", \"site_env_spp_simulated.csv\", package = \"invasimap\")) # site_env_spp = read.csv(system.file(\"extdata\", \"site_env_spp_trt_sim.csv\", package = \"invasimap\")) dim(site_env_spp) #> [1] 11205    36 str(site_env_spp) #> 'data.frame':    11205 obs. of  36 variables: #>  $ site_id     : int  1026 1026 1026 1026 1026 1026 1026 1026 1026 1026 ... #>  $ x           : num  28.8 28.8 28.8 28.8 28.8 ... #>  $ y           : num  -22.3 -22.3 -22.3 -22.3 -22.3 ... #>  $ species     : chr  \"Acraea horta\" \"Amata cerbera\" \"Bicyclus safitza safitza\" \"Cacyreus lingeus\" ... #>  $ count       : int  10 0 0 0 9 8 8 3 19 0 ... #>  $ trait_cont1 : num  0.83 0.874 -0.428 0.661 0.283 ... #>  $ trait_cont2 : num  0.811 -0.106 0.672 0.475 0.622 ... #>  $ trait_cont3 : num  -0.922 0.498 0.355 -0.657 -0.478 ... #>  $ trait_cont4 : num  -0.684 -0.282 0.291 0.552 0.127 ... #>  $ trait_cont5 : num  0.0715 -0.9955 0.2179 0.6736 0.503 ... #>  $ trait_cont6 : num  0.16 0.643 -0.773 0.529 0.247 ... #>  $ trait_cont7 : num  0.2035 -0.606 0.0705 -0.6409 -0.0962 ... #>  $ trait_cont8 : num  -0.425 -0.611 0.568 -0.742 -0.742 ... #>  $ trait_cont9 : num  0.1493 -0.2933 0.0949 0.7854 -0.02 ... #>  $ trait_cont10: num  -0.5772 0.0992 -0.036 -0.6811 -0.7008 ... #>  $ trait_cat11 : chr  \"wetland\" \"forest\" \"wetland\" \"wetland\" ... #>  $ trait_cat12 : chr  \"diurnal\" \"nocturnal\" \"diurnal\" \"nocturnal\" ... #>  $ trait_cat13 : chr  \"bivoltine\" \"multivoltine\" \"univoltine\" \"multivoltine\" ... #>  $ trait_cat14 : chr  \"detritivore\" \"detritivore\" \"generalist\" \"nectarivore\" ... #>  $ trait_cat15 : chr  \"migratory\" \"resident\" \"resident\" \"migratory\" ... #>  $ trait_ord16 : int  4 1 4 3 4 1 1 4 1 1 ... #>  $ trait_ord17 : int  1 4 4 3 2 4 3 5 4 3 ... #>  $ trait_bin18 : int  1 1 1 0 1 1 1 1 0 0 ... #>  $ trait_bin19 : int  1 0 1 0 0 1 1 1 0 1 ... #>  $ trait_ord20 : chr  \"medium\" \"large\" \"medium\" \"medium\" ... #>  $ env1        : num  2.2 2.2 2.2 2.2 2.2 ... #>  $ env2        : num  0.647 0.647 0.647 0.647 0.647 ... #>  $ env3        : num  -0.491 -0.491 -0.491 -0.491 -0.491 ... #>  $ env4        : num  -0.793 -0.793 -0.793 -0.793 -0.793 ... #>  $ env5        : num  0.822 0.822 0.822 0.822 0.822 ... #>  $ env6        : num  1.55 1.55 1.55 1.55 1.55 ... #>  $ env7        : num  0.419 0.419 0.419 0.419 0.419 ... #>  $ env8        : num  -1.05 -1.05 -1.05 -1.05 -1.05 ... #>  $ env9        : num  -0.0537 -0.0537 -0.0537 -0.0537 -0.0537 ... #>  $ env10       : num  0.933 0.933 0.933 0.933 0.933 ... #>  $ cat11_num   : int  -1 1 -1 -1 1 0 1 -1 1 0 ...  # Check the results names(grid_obs) #> [1] \"site_id\"  \"x\"        \"y\"        \"obs_sum\"  \"spp_rich\" \"species\"  \"count\" # names(grid_env)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_5-model-inputs","dir":"","previous_headings":"","what":"5. Model Inputs","title":"invasimap","text":"Shape data every row “one species one site,” species’ traits site’s environment.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_51-format-site-locations","dir":"","previous_headings":"5. Model Inputs","what":"5.1. Format site-locations","title":"invasimap","text":"section isolates unique spatial coordinates sampling site. resulting table (site_xy) used spatial mapping, distance calculations, merging environmental biodiversity metrics precise locations.","code":"# Create site coordinate table i.e. # Unique site coordinates site_xy <- site_env_spp %>%   dplyr::select(site_id, x, y) %>%   distinct() %>%   mutate(.site_id_rn = site_id) %>%   column_to_rownames(var = \".site_id_rn\") head(site_xy) #>      site_id     x         y #> 1026    1026 28.75 -22.25004 #> 1027    1027 29.25 -22.25004 #> 1028    1028 29.75 -22.25004 #> 1029    1029 30.25 -22.25004 #> 1030    1030 30.75 -22.25004 #> 1031    1031 31.25 -22.25004"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_52-format-site-environment-variables","dir":"","previous_headings":"5. Model Inputs","what":"5.2. Format site-environment variables","title":"invasimap","text":", extract site--environment matrix containing values measured environmental covariates sampling site. matrix (site_env) enables analyses environmental gradients, spatial drivers community composition, covariate modeling.","code":"# Site-by-environment matrix site_env <- site_env_spp %>%   dplyr::select(     site_id, x, y,     env1:env10   ) %>%   mutate(site_id = as.character(site_id)) %>% # ensure character   distinct() %>%   mutate(.site_id_rn = site_id) %>%   column_to_rownames(var = \".site_id_rn\") dim(site_env) #> [1] 415  13 head(site_env[1:6, 1:6]) #>      site_id     x         y     env1      env2       env3 #> 1026    1026 28.75 -22.25004 2.203029 0.6471631 -0.4910981 #> 1027    1027 29.25 -22.25004 2.086006 1.4025519 -0.4471106 #> 1028    1028 29.75 -22.25004 2.233508 0.8008731 -0.5405243 #> 1029    1029 30.25 -22.25004 2.333375 1.1607272 -0.4405388 #> 1030    1030 30.75 -22.25004 2.153073 1.2747649 -0.2945477 #> 1031    1031 31.25 -22.25004 2.046307 1.4773531 -0.4125693  # site_env = grid_env %>% #   dplyr::select(site_id, x, y, #                 obs_sum, spp_rich, #                 bio01:bio19) %>% #   distinct() %>% #   mutate(.site_id_rn = site_id) %>% #   column_to_rownames(var = \".site_id_rn\") # # dim(site_env) # head(site_env[1:6,1:6])"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_53-format-site-species-abundances-and-presence-absence","dir":"","previous_headings":"5. Model Inputs","what":"5.3. Format site-species abundances and presence-absence","title":"invasimap","text":"section generates two site--species matrices: one containing abundances (site_spp_ab), one indicating presence-absence (site_spp_pa). matrices fundamental calculating community diversity, richness, modeling occupancy abundance patterns.","code":"# Site-by-species abundance matrix (wide format) # site_spp_ab = grid_obs %>% site_spp_ab <- site_env_spp %>% #   dplyr::select(site_id, x, y, species, count) %>%   pivot_wider(     names_from  = species,     values_from = count,     values_fill = list(count = 0)   ) %>%   mutate(.site_id_rn = site_id) %>%   column_to_rownames(var = \".site_id_rn\") dim(site_spp_ab) #> [1] 415  30 head(site_spp_ab[1:6, 1:6]) #>      site_id     x         y Acraea horta Amata cerbera #> 1026    1026 28.75 -22.25004           10             0 #> 1027    1027 29.25 -22.25004            0             7 #> 1028    1028 29.75 -22.25004            0             0 #> 1029    1029 30.25 -22.25004            0            31 #> 1030    1030 30.75 -22.25004            0            12 #> 1031    1031 31.25 -22.25004            0             7 #>      Bicyclus safitza safitza #> 1026                        0 #> 1027                        0 #> 1028                        0 #> 1029                        0 #> 1030                        3 #> 1031                        0  # Site-by-species presence/absence matrix (wide format) # site_spp_pa = grid_obs %>% site_spp_pa <- site_env_spp %>%   mutate(pa = as.integer(count > 0)) %>%   dplyr::select(site_id, x, y, species, pa) %>%   pivot_wider(     names_from  = species,     values_from = pa,     values_fill = list(pa = 0)   ) %>%   mutate(.site_id_rn = site_id) %>%   column_to_rownames(var = \".site_id_rn\") dim(site_spp_pa) #> [1] 415  30 head(site_spp_pa[1:6, 1:6]) #>      site_id     x         y Acraea horta Amata cerbera #> 1026    1026 28.75 -22.25004            1             0 #> 1027    1027 29.25 -22.25004            0             1 #> 1028    1028 29.75 -22.25004            0             0 #> 1029    1029 30.25 -22.25004            0             1 #> 1030    1030 30.75 -22.25004            0             1 #> 1031    1031 31.25 -22.25004            0             1 #>      Bicyclus safitza safitza #> 1026                        0 #> 1027                        0 #> 1028                        0 #> 1029                        0 #> 1030                        1 #> 1031                        0"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_54-format-species-trait-values","dir":"","previous_headings":"5. Model Inputs","what":"5.4. Format species-trait values","title":"invasimap","text":"build species--trait matrix (spp_trait), including measured continuous, categorical, ordinal traits species. structure central trait-based analyses community assembly, functional diversity, invasion processes.","code":"# Species-by-trait matrix (wide) # Extract and process continuous, categorical, and ordinal trait data spp_trait <- spp_traits %>% # site_env_spp   dplyr::select(     species, trait_cont1:trait_cont10,     trait_cat11:trait_cat15,     trait_ord16:trait_ord20   ) %>%   distinct() %>%   mutate(.species_rn = species) %>%   column_to_rownames(var = \".species_rn\") %>%   mutate(across(where(is.character), as.factor))  # spp_trait = spp_traits %>% # site_env_spp #   dplyr::select(species, trt1:trt20) %>% #   distinct() %>% #   mutate(.species_rn = species) %>% #   column_to_rownames(var = \".species_rn\") %>% #   mutate(across(where(is.character), as.factor))  dim(spp_trait) #> [1] 27 21 head(spp_trait[1:6, 1:6]) #>                                               species trait_cont1 trait_cont2 #> Utetheisa pulchella               Utetheisa pulchella  0.02842357  -0.2030292 #> Danaus chrysippus orientis Danaus chrysippus orientis  0.03819190  -0.2237834 #> Telchinia serena                     Telchinia serena -0.83512488  -0.3065035 #> Vanessa cardui                         Vanessa cardui -0.21959307   0.5693856 #> Hypolimnas misippus               Hypolimnas misippus  0.31398458   0.6658322 #> Pieris brassicae                     Pieris brassicae -0.76502528  -0.1364975 #>                            trait_cont3 trait_cont4 trait_cont5 #> Utetheisa pulchella        -0.99685889   0.4797106  0.87477170 #> Danaus chrysippus orientis  0.02882587  -0.5325932 -0.09453685 #> Telchinia serena            0.02881542   0.9252160  0.26301460 #> Vanessa cardui              0.16320801   0.4664918  0.70096550 #> Hypolimnas misippus         0.51908854  -0.3895633 -0.99723831 #> Pieris brassicae           -0.71904181   0.4879493 -0.21005391"},{"path":[]},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_61-summarise-site-level-diversity","dir":"","previous_headings":"6. Data summaries and visualisation","what":"6.1. Summarise site-level diversity","title":"invasimap","text":"section quantifies visualizes site-level biodiversity, focusing local species richness abundance. Calculating metrics essential mapping alpha diversity, assessing community structure, identifying spatial patterns biodiversity hotspots low-diversity areas across study landscape. Species richness (spp_richs): number species present (non-zero counts) site ss. Total abundance (obs_sums): sum individual counts across species site ss (proxy sampling effort). Mean abundance per species (obs_means): total abundance site ss divided number species columns (N); effectively average count per species regardless whether present.","code":"# Calculate site-level diversity metrics from the species-by-abundance matrix: spp_rich_obs <- site_spp_ab %>%   mutate(     spp_rich = rowSums(dplyr::select(., -site_id, -x, -y) > 0), # Species richness: number of species present     obs_sum = rowSums(dplyr::select(., -site_id, -x, -y)), # Total abundance: sum of all individuals     obs_mean = rowMeans(dplyr::select(., -site_id, -x, -y)) # Mean abundance per species   ) %>%   # Keep summary metrics and site coordinates   dplyr::select(site_id, x, y, spp_rich, obs_sum, obs_mean) %>%   mutate(site_id = as.character(site_id)) # Ensure site_id` is a head(spp_rich_obs) #>      site_id     x         y spp_rich obs_sum obs_mean #> 1026    1026 28.75 -22.25004       17     172 6.370370 #> 1027    1027 29.25 -22.25004        9      92 3.407407 #> 1028    1028 29.75 -22.25004       11     131 4.851852 #> 1029    1029 30.25 -22.25004       12     129 4.777778 #> 1030    1030 30.75 -22.25004       13     136 5.037037 #> 1031    1031 31.25 -22.25004       13      99 3.666667  # Define a custom color palette for richness mapping (blue = low, dark red = high) col_pal <- colorRampPalette(c(\"blue\", \"green\", \"yellow\", \"orange\", \"red\", \"darkred\"))  # Visualize spatial distribution of site-level species richness ggplot(spp_rich_obs, aes(x = x, y = y, fill = sqrt(spp_rich))) +   geom_tile() +   # Use custom color gradient, reversed so high richness is warm/dark, low is cool/blue   scale_fill_gradientn(colors = rev(col_pal(10)), name = \"√(Richness)\") +   geom_text(aes(label = spp_rich), color = \"grey80\", size = 2) + # Overlay actual richness values   geom_sf(data = rsa, inherit.aes = FALSE, fill = NA, color = \"black\", size = 0.4) + # Plot boundary   labs(     x = \"Longitude\",     y = \"Latitude\",     title = \"Spatial Distribution of Species Richness\"   ) +   theme(panel.grid = element_blank())"},{"path":[]},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_71-basic-trait-similarity","dir":"","previous_headings":"7. Functional Trait Space","what":"7.1. Basic trait similarity","title":"invasimap","text":"diagnose functional dimensions conserved versus variable across metacommunity, compute trait-level similarity trait across species. allows identification traits might constrain facilitate invasion coexistence (e.g., highly conserved traits might reflect strong filtering, highly variable traits may axes ecological opportunity). use compute_trait_similarity() function, calculates similarity follows: Numeric traits: Scaled [0,1], pairwise Euclidean distances computed, similarity 1 - mean(distance). values identical one value present, similarity 100%. Categorical traits: Similarity proportion possible species pairs share category (level). output table percent similarity trait, allowing direct comparison conservation vs. lability across traits. Trait-level functional similarity across species.","code":"# Compute Trait Similarity for Numeric and Categorical Variables df_traits <- compute_trait_similarity(spp_trait[, -1]) head(df_traits) #> # A tibble: 6 × 2 #>   Trait       Similarity #>   <chr>            <dbl> #> 1 trait_cont1       61.8 #> 2 trait_cont2       63.9 #> 3 trait_cont3       65.1 #> 4 trait_cont4       64.1 #> 5 trait_cont5       69.5 #> 6 trait_cont6       62.5  # Barplot: trait-level similarity (percent identity or scaled distance) ggplot(df_traits, aes(x = reorder(Trait, Similarity), y = Similarity, fill = Similarity)) +   geom_col(show.legend = FALSE) +   scale_fill_viridis_c(option = \"inferno\") + # ramp color scale   # ylim(0,100) +   labs(     title = \"Average Trait Similarity (%)\",     y = \"Similarity (%)\",     x = NULL   ) +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":[]},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_721-compute-gower-distance-handles-mixed-trait-types","dir":"","previous_headings":"7. Functional Trait Space > 7.2. Gower distance, clustering, and trait space mapping (PCoA)","what":"7.2.1. Compute Gower distance (handles mixed trait types)","title":"invasimap","text":"Trait-based approaches require robust dissimilarity measures mixed data types (continuous, categorical, ordinal). , compute pairwise Gower distances among species, accommodates variable types, use hierarchical clustering visualize functional similarity structure within community.","code":"# Compute Gower dissimilarity matrix (excluding species column) sbt_gower <- cluster::daisy(spp_trait[, -1], metric = \"gower\") trait_dist <- as.matrix(sbt_gower)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_722-hierarchical-clustering-visualise-trait-based-groupings","dir":"","previous_headings":"7. Functional Trait Space > 7.2. Gower distance, clustering, and trait space mapping (PCoA)","what":"7.2.2. Hierarchical clustering (visualise trait-based groupings)","title":"invasimap","text":"{r  hclust-traits, fig.cap=\"Species clustering functional traits (Gower distance, hierarchical clustering).\" # Hierarchical clustering dendrogram visualization functional similarity # Hierarchical clustering gower_hc = hclust(.dist(sbt_gower)) # Dendrogram fviz_dend(   gower_hc,   k = 4,   cex = 0.5,   k_colors = viridis(4, option = \"D\"), # k_colors = c(\"red\",\"blue\",\"green\",\"purple\"),   color_labels_by_k = TRUE,   rect = TRUE,   rect_border = \"grey40\",   main = \"Gower Cluster Dendrogram\") +    guides(scale = \"none\")","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_723-pcoa-ordination-map-species-into-a-reduced-dimensional-trait-space","dir":"","previous_headings":"7. Functional Trait Space > 7.2. Gower distance, clustering, and trait space mapping (PCoA)","what":"7.2.3. PCoA ordination (map species into a reduced-dimensional trait space)","title":"invasimap","text":"Principal Coordinates Analysis (PCoA) enables ordination species reduced, low-dimensional trait space, preserving pairwise dissimilarities. used visualize overall structure functional trait space examine density clustering patterns. Kernel density trait space (PCoA axes 1-2).","code":"# PCoA ordination pcoa <- cmdscale(sbt_gower, eig = TRUE) scores_species <- as.data.frame(pcoa$points)[, 1:2] colnames(scores_species) <- c(\"PCoA1\", \"PCoA2\")  # Visualize trait space density using kernel density estimation xlims <- range(scores_species$PCoA1) + c(-1, 1) * 0.1 * diff(range(scores_species$PCoA1)) ylims <- range(scores_species$PCoA2) + c(-1, 1) * 0.1 * diff(range(scores_species$PCoA2)) grid_density <- MASS::kde2d(scores_species$PCoA1,   scores_species$PCoA2,   n = 100,   lims = c(xlims, ylims) ) filled.contour(   grid_density,   color.palette = viridis,   xlim = xlims, ylim = ylims,   plot.title = title(     main = \"Trait Space Density Contours\",     xlab = \"PCoA1\",     ylab = \"PCoA2\"   ),   plot.axes = {     axis(1)     axis(2)     points(scores_species, pch = 19, cex = 0.5)     # Draw all contours (thin)     contour(       x = grid_density$x, y = grid_density$y, z = grid_density$z,       add = TRUE, drawlabels = FALSE, lwd = 0.7, col = \"grey60\"     )     # Highlight the major contour (e.g. highest density level)     contour(       x = grid_density$x, y = grid_density$y, z = grid_density$z,       add = TRUE, drawlabels = FALSE,       levels = max(grid_density$z) * 0.5, # 50% of max density       lwd = 2, col = \"black\"     )   },   key.title = title(main = \"Density\") )"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_73-trait-centrality","dir":"","previous_headings":"7. Functional Trait Space","what":"7.3. Trait centrality","title":"invasimap","text":"Trait centrality quantifies close species “core” community’s trait space. Peripheral species may ecologically distinct potentially likely become invaders escape biotic resistance. Distribution trait centrality (distance centroid) among species. histogram shows far species center community’s trait space. x-axis distance centroid (central trait combination community). y-axis number species distance. Interpretation: species clustered intermediate distances (~0.18-0.22), meaning traits moderately similar community average. species close centroid (low distances) - “core” species typical trait values. Others lie (higher distances) - “peripheral” species unusual trait combinations, might indicate unique ecological roles specialisations. Summary: community centred around typical trait set, also includes handful species either similar quite distinct average.  ","code":"# Calculate the community trait centroid in reduced trait-space (PCoA axes) centroid <- colMeans(scores_species)  # Compute each species' Euclidean distance to the centroid (trait centrality) scores_species$centrality <- sqrt(rowSums((scores_species - centroid)^2))  # Add centrality to the main trait data frame for further analysis/plotting spp_trt_cent <- spp_trait spp_trt_cent$centrality <- scores_species$centrality  # Histogram of distribution of trait centrality (core vs peripheral species) ggplot(spp_trt_cent, aes(x = centrality)) +   geom_histogram(bins = 20, fill = \"steelblue\", color = \"white\") +   theme_bw() +   labs(     x = \"Distance to community-centroid\", y = \"Number of species\",     title = \"Trait Centrality (Community Edge vs Core)\"   ) # # OPTIONAL # # Scatterplot of trait-space (PCoA1 vs PCoA2), coloured by trait centrality # ggplot(scores_species, aes(x = PCoA1, y = PCoA2, colour = centrality)) + #   geom_point(size = 3) + #   scale_colour_viridis_c(option = \"magma\") + #   labs(colour = \"Centrality\", #        title = \"Species Position in Trait Space (PCoA axes 1-2)\")"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_74-trait-dispersion","dir":"","previous_headings":"7. Functional Trait Space","what":"7.4. Trait dispersion","title":"invasimap","text":"calculate key functional diversity metrics community scale: FDis: functional dispersion (average distance centroid) FRic: functional richness (trait-space convex hull volume) RaoQ: Rao’s quadratic entropy (total abundance-weighted trait dissimilarity) summarize functional structure ecological breadth community. Community-level functional diversity metrics. bar chart summarises three ways describing community’s overall functional diversity: FDis (Functional Dispersion) - Highest value (~0.20). Shows , average, species moderately spread community’s trait centroid, meaning fair amount variation trait combinations. FRic (Functional Richness) - low value (~0.02). Indicates total “volume” trait space occupied community quite small — species collectively use limited portion possible trait combinations. RaoQ (Rao’s Quadratic Entropy) - Intermediate value (~0.14). Measures total abundance-weighted trait dissimilarity. moderate value means , traits >> differ species, much community’s abundance concentrated species >> extremely dissimilar. Summary: community moderate spread traits (FDis), low coverage potential trait space (FRic), moderate abundance-weighted diversity (RaoQ). suggests individual species differ, community whole functionally constrained.  ","code":"# FDis: Functional dispersion (mean distance to centroid in trait space) FDis <- mean(scores_species$centrality)  # FRic: Functional richness (convex hull volume in PCoA space) hull <- convhulln(scores_species, options = \"FA\") FRic <- hull$vol  # Rao's Q: Rao's quadratic entropy (abundance-weighted pairwise trait diversity) n <- nrow(scores_species) dmat <- as.matrix(dist(scores_species)) p <- rep(1 / n, n) RaoQ <- 0.5 * sum(outer(p, p) * dmat)  # Assemble all community-level trait dispersion metrics for comparison dispersion_df <- data.frame(   Metric = c(\"FDis\", \"FRic\", \"RaoQ\"),   Value = c(FDis, FRic, RaoQ) )  # Bar plot: community-level trait dispersion metrics ggplot(dispersion_df, aes(x = Metric, y = Value)) +   geom_col(width = 0.6, fill = \"firebrick\") +   theme_classic() +   labs(title = \"Community-Level Trait Dispersion\", y = \"Metric value\")"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_75-combined-functional-trait-space-workflow","dir":"","previous_headings":"7. Functional Trait Space","what":"7.5. Combined functional trait space workflow","title":"invasimap","text":"Trait-based community analyses often require multiple sequential steps: computing per-trait similarity, calculating trait dissimilarities across species, ordination, mapping trait space, quantifying species centrality, summarising community-level diversity metrics. compute_trait_space() function unifies steps single call, producing per-trait similarity summaries community-level dispersion outputs follows: Per-Trait Similarity Table: $similarity holds percentage similarity (0-100) trait column, computed either ) Numeric traits scaled mean pairwise similarity; ii) Categorical traits proportion identical pairs. Trait Dissimilarity & Clustering: $dispersion$plots$dend contains hierarchical clustering results based pairwise Gower distances across traits, highlighting functional similarity groupings. Trait Space Ordination (PCoA): $dispersion$plots$density_gg shows species positioned reduced-dimensional trait space using PCoA, kernel density contours reveal clusters gaps. Species Centrality: $dispersion$plots$centrality_hist displays species’ Euclidean distance trait-space centroid. Shorter distances indicate core species; longer distances indicate peripheral, functionally distinct species. Functional Diversity Metrics Table: $dispersion$metrics_df provides tabulated values computed community-level functional diversity indices. Functional Diversity Summary Plots: $dispersion$plots$metrics_bar presents bar plots three key community-level metrics: FDis - functional dispersion (mean distance centroid); FRic - functional richness (convex hull volume/area); RaoQ - abundance-weighted trait dissimilarity (Rao’s quadratic entropy).  Note: pairing compute_trait_similarity() (per-trait conservation/lability) compute_trait_dispersion() (whole-community functional structure), get complete, repeatable workflow trait-based invasion coexistence studies. plots stored res$plots flexible reuse, res$metrics_df provides ready--use numerical summaries statistical modelling.   can also rearrange customise plots res$plots using patchwork layout tools. example, code recreates combined layout used show_plot = TRUE, omits base filled.contour() plot simplicity. Note: - way can change order arrangement panels - Replace individual plots customised versions (e.g., change themes colours) - Combine figures workflow  ","code":"# res = compute_trait_dispersion(spp_trait, #                                species_col = 1, #                                k = 4, #                                pcoa_dims = 2, #                                abundance = rep(1, nrow(spp_trait)),  # equal weights #                                kde_n = 100, #                                viridis_option = \"D\", #                                show_plots = TRUE,                    # combined patchwork output #                                show_density_plot = FALSE, #                                seed = NULL) # # str(res, max.level=1)  # same inputs and space as your manual pipeline res <- compute_trait_space(   trait_df = spp_trait,   species_col = 1,   do_similarity = FALSE, # you don't need per-trait similarity here   k = 4, # only affects dendrogram; metrics don’t use k   pcoa_dims = 2, # keep 2 axes   abundance = rep(1, nrow(spp_trait)), # equal weights ⇒ unweighted centroid   show_density_plot = FALSE,   show_plots = TRUE ) str(res, max.level = 1) #> List of 1 #>  $ dispersion:List of 7  head(res$similarity) #> NULL str(res$dispersion, max.level = 1) #> List of 7 #>  $ distance_matrix: num [1:27, 1:27] 0 0.398 0.416 0.534 0.607 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ hc             :List of 7 #>   ..- attr(*, \"class\")= chr \"hclust\" #>  $ pcoa           :List of 5 #>  $ scores         :'data.frame': 27 obs. of  3 variables: #>  $ centroid       : num [1:2] -1.44e-17 -5.42e-20 #>  $ metrics_df     :'data.frame': 3 obs. of  2 variables: #>  $ plots          :List of 4 str(res$dispersion, max.level = 1) #> List of 7 #>  $ distance_matrix: num [1:27, 1:27] 0 0.398 0.416 0.534 0.607 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ hc             :List of 7 #>   ..- attr(*, \"class\")= chr \"hclust\" #>  $ pcoa           :List of 5 #>  $ scores         :'data.frame': 27 obs. of  3 variables: #>  $ centroid       : num [1:2] -1.44e-17 -5.42e-20 #>  $ metrics_df     :'data.frame': 3 obs. of  2 variables: #>  $ plots          :List of 4  # # Custom combined layout without base filled.contour # combined = res$dispersion$plots$dend / #   (res$dispersion$plots$centrality_hist | res$dispersion$plots$metrics_bar) / #   res$dispersion$plots$density_gg + #   patchwork::plot_layout(heights = c(1, 2, 1)) # # print(combined)  # display in console"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_8-trait-environment-response","dir":"","previous_headings":"","what":"8. Trait-Environment Response","title":"invasimap","text":"evaluate species functional traits, environmental conditions, interactions influence species abundances, use Generalized Linear Mixed Model (GLMM). framework: Quantifies separate combined effects traits environment. Controls repeated observations species sites via random intercepts, accounting non-independence spatial structure. flexible enough predict hypothetical (invader) species might perform new environments. use Tweedie error distribution, well-suited ecological count data handles overdispersion many zeros.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_81-prepare-the-long-format-dataset","dir":"","previous_headings":"8. Trait-Environment Response","what":"8.1. Prepare the long-format dataset","title":"invasimap","text":"first create long-format table, row single species--site observation, associated predictors attached: Site metadata: site_id, spatial coordinates (x, y) Species ID count/abundance Environmental predictors: e.g., env1-env10 Species traits: continuous (trait_cont1-trait_cont10), categorical (trait_cat11-trait_cat15), ordinal (trait_ord16-trait_ord20) convert character variables factors ’re correctly handled model.","code":"# Prepare long-format data # Use simulated traits longDF <- site_env_spp %>%   dplyr::select(     site_id, x, y, species, count, # Metadata + response     env1:env10, # Environment variables     trait_cont1:trait_cont10, # Continuous traits     trait_cat11:trait_cat15, # Categorical traits     trait_ord16:trait_ord20 # Ordinal traits   ) %>%   mutate(across(where(is.character), as.factor))  # # Use real enviro and simulated traits # longDF = site_env_spp %>% #   dplyr::select( #     site_id, x, y, species, count,            # Metadata + response #     bio01:bio19,                              # Environment variables #     trt1:trt20 #   ) %>% #   mutate(across(where(is.character), as.factor)) # names(longDF) # head(longDF)  # # Use `grid_obs` from `dissmapr` imports instead # longDF = grid_obs %>% #   mutate(site_id = as.character(site_id)) %>% #   left_join(site_env %>% dplyr::select(-x, -y) %>% #               mutate(site_id = as.character(site_id)), by = \"site_id\") %>% #   left_join(spp_trait %>% #               mutate(species = as.character(species)), by = \"species\") %>% #   mutate(across(where(is.character), as.factor))  # Ensure all character fields are treated as factors # # head(longDF)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_82-build-the-model-formula","dir":"","previous_headings":"8. Trait-Environment Response","what":"8.2. Build the model formula","title":"invasimap","text":"use build_glmm_formula() automatically detect trait environmental predictor columns based naming conventions (prefixes like “trait_” “env_”) excluding known metadata columns (site_id, x, y, species, count). function : Generates main effect terms detected traits detected environment variables. Optionally expands pairwise trait × environment interactions (e.g., trait_cont1:env3), capturing environment-dependent trait effects. Appends random intercepts grouping variables specified random_effects (default: (1 | species) (1 | site_id)). Returns valid R formula object ready model fitting. automatic approach ensures model always reflects full trait-environment structure without hard-coding variable names.","code":"# Automatically build the GLMM formula fml <- build_glmm_formula(   data                 = longDF,   response             = \"count\", # Response variable   species_col          = \"species\", # Random effect grouping   site_col             = \"site_id\", # Random effect grouping   # env_cols             = names(longDF[,6:24]),   include_interactions = TRUE, # Add all trait × environment terms   random_effects       = c(\"(1 | species)\", \"(1 | site_id)\") )  fml #> count ~ trait_cont1 + trait_cont2 + trait_cont3 + trait_cont4 +  #>     trait_cont5 + trait_cont6 + trait_cont7 + trait_cont8 + trait_cont9 +  #>     trait_cont10 + trait_cat11 + trait_cat12 + trait_cat13 +  #>     trait_cat14 + trait_cat15 + trait_ord16 + trait_ord17 + trait_bin18 +  #>     trait_bin19 + trait_ord20 + env1 + env2 + env3 + env4 + env5 +  #>     env6 + env7 + env8 + env9 + env10 + (trait_cont1 + trait_cont2 +  #>     trait_cont3 + trait_cont4 + trait_cont5 + trait_cont6 + trait_cont7 +  #>     trait_cont8 + trait_cont9 + trait_cont10 + trait_cat11 +  #>     trait_cat12 + trait_cat13 + trait_cat14 + trait_cat15 + trait_ord16 +  #>     trait_ord17 + trait_bin18 + trait_bin19 + trait_ord20):(env1 +  #>     env2 + env3 + env4 + env5 + env6 + env7 + env8 + env9 + env10) +  #>     (1 | species) + (1 | site_id) #> <environment: 0x000001b1cc7a3b28> # Example output: # count ~ trait_cont1 + trait_cont2 + ... + env1 + env2 + ... + #         (trait_cont1 + ... + trait_cat15):(env1 + ... + env10) + #         (1 | species) + (1 | site_id)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_83-fit-the-glmm","dir":"","previous_headings":"8. Trait-Environment Response","what":"8.3. Fit the GLMM","title":"invasimap","text":"fit model using glmmTMB::glmmTMB(), supports wide range distributions correlation structures. case: Handles overdispersed count data zero-inflation without requiring separate zero-inflated component. log link models multiplicative effects predictors expected abundance. Data: prepared long-format table (longDF). Formula: formula, automatically generated fml build_glmm_formula() user customised. model fit via maximum likelihood, estimating fixed-effect coefficients (traits, environments, interactions) variance components random effects. Note: model forms core invasion fitness workflow, allowing us predict novel trait-environment combinations likely perform (abundance-wise) different sites, enables robust estimation direct interactive drivers community assembly.  ","code":"# Fit Tweedie GLMM set.seed(123) mod <- glmmTMB::glmmTMB(   formula = fml,   data    = longDF,   family  = glmmTMB::tweedie(link = \"log\") )  summary(mod) #>  Family: tweedie  ( log ) #> Formula:           #> count ~ trait_cont1 + trait_cont2 + trait_cont3 + trait_cont4 +   #>     trait_cont5 + trait_cont6 + trait_cont7 + trait_cont8 + trait_cont9 +   #>     trait_cont10 + trait_cat11 + trait_cat12 + trait_cat13 +   #>     trait_cat14 + trait_cat15 + trait_ord16 + trait_ord17 + trait_bin18 +   #>     trait_bin19 + trait_ord20 + env1 + env2 + env3 + env4 + env5 +   #>     env6 + env7 + env8 + env9 + env10 + (trait_cont1 + trait_cont2 +   #>     trait_cont3 + trait_cont4 + trait_cont5 + trait_cont6 + trait_cont7 +   #>     trait_cont8 + trait_cont9 + trait_cont10 + trait_cat11 +   #>     trait_cat12 + trait_cat13 + trait_cat14 + trait_cat15 + trait_ord16 +   #>     trait_ord17 + trait_bin18 + trait_bin19 + trait_ord20):(env1 +   #>     env2 + env3 + env4 + env5 + env6 + env7 + env8 + env9 + env10) +   #>     (1 | species) + (1 | site_id) #> Data: longDF #>  #>       AIC       BIC    logLik -2*log(L)  df.resid  #>   38196.0   40239.4  -18819.0   37638.0     10926  #>  #> Random effects: #>  #> Conditional model: #>  Groups  Name        Variance  Std.Dev. #>  species (Intercept) 0.0007666 0.02769  #>  site_id (Intercept) 0.0067449 0.08213  #> Number of obs: 11205, groups:  species, 27; site_id, 415 #>  #> Dispersion parameter for tweedie family (): 7.98  #>  #> Conditional model: #>                                 Estimate Std. Error z value Pr(>|z|)     #> (Intercept)                    1.4704424  0.2628156   5.595 2.21e-08 *** #> trait_cont1                   -0.5101186  0.1596020  -3.196 0.001393 **  #> trait_cont2                   -0.2327202  0.0678723  -3.429 0.000606 *** #> trait_cont3                   -0.0341002  0.1094644  -0.312 0.755407     #> trait_cont4                    0.0130361  0.0849067   0.154 0.877977     #> trait_cont5                    0.0729463  0.0994374   0.734 0.463199     #> trait_cont6                    0.0968116  0.1181499   0.819 0.412560     #> trait_cont7                   -0.0688003  0.0874939  -0.786 0.431666     #> trait_cont8                    0.1176131  0.1168984   1.006 0.314361     #> trait_cont9                   -0.0103170  0.0824478  -0.125 0.900418     #> trait_cont10                   0.1304327  0.0805313   1.620 0.105307     #> trait_cat11grassland           0.0306508  0.1759612   0.174 0.861716     #> trait_cat11wetland            -0.1600557  0.2324683  -0.689 0.491134     #> trait_cat12nocturnal          -0.2304255  0.1110776  -2.074 0.038037 *   #> trait_cat13multivoltine       -0.0010464  0.0923656  -0.011 0.990961     #> trait_cat13univoltine         -0.2102297  0.1253302  -1.677 0.093463 .   #> trait_cat14generalist          0.0071383  0.2479466   0.029 0.977032     #> trait_cat14nectarivore         0.2505427  0.1645857   1.522 0.127943     #> trait_cat15resident           -0.0296779  0.1293586  -0.229 0.818540     #> trait_ord16                    0.0100260  0.0466039   0.215 0.829665     #> trait_ord17                   -0.0374465  0.0314953  -1.189 0.234457     #> trait_bin18                    0.0873029  0.0915280   0.954 0.340165     #> trait_bin19                    0.0315366  0.1155415   0.273 0.784895     #> trait_ord20medium              0.1233020  0.2515604   0.490 0.624029     #> trait_ord20small              -0.1603479  0.1475234  -1.087 0.277067     #> env1                           0.5422358  0.5433334   0.998 0.318289     #> env2                          -1.0286903  0.5629959  -1.827 0.067674 .   #> env3                          -0.4640513  0.8122554  -0.571 0.567788     #> env4                           0.5304439  0.6134961   0.865 0.387245     #> env5                           0.4719702  0.6761339   0.698 0.485151     #> env6                           0.3931038  0.6982169   0.563 0.573427     #> env7                           0.3775495  0.9974476   0.379 0.705048     #> env8                          -0.2439993  1.1758269  -0.208 0.835609     #> env9                          -0.6138702  1.2123491  -0.506 0.612613     #> env10                         -0.4518295  1.2848177  -0.352 0.725087     #> trait_cont1:env1               0.4542883  0.3307548   1.373 0.169600     #> trait_cont1:env2              -0.1657942  0.3429966  -0.483 0.628833     #> trait_cont1:env3              -0.0672174  0.4913060  -0.137 0.891178     #> trait_cont1:env4               0.3310830  0.3695503   0.896 0.370302     #> trait_cont1:env5              -0.0086909  0.4129877  -0.021 0.983211     #> trait_cont1:env6              -0.0522244  0.4194517  -0.125 0.900914     #> trait_cont1:env7              -0.2542360  0.6089449  -0.418 0.676311     #> trait_cont1:env8              -0.1987654  0.7093235  -0.280 0.779310     #> trait_cont1:env9               0.0132204  0.7344460   0.018 0.985638     #> trait_cont1:env10              0.2976046  0.7825323   0.380 0.703716     #> trait_cont2:env1               0.1224603  0.1401736   0.874 0.382318     #> trait_cont2:env2               0.1257619  0.1457562   0.863 0.388234     #> trait_cont2:env3               0.0510393  0.2097336   0.243 0.807732     #> trait_cont2:env4              -0.0545704  0.1554956  -0.351 0.725630     #> trait_cont2:env5              -0.0523391  0.1758109  -0.298 0.765931     #> trait_cont2:env6              -0.0236931  0.1776132  -0.133 0.893879     #> trait_cont2:env7               0.0193329  0.2592569   0.075 0.940556     #> trait_cont2:env8              -0.0035217  0.3032631  -0.012 0.990735     #> trait_cont2:env9               0.0114218  0.3123773   0.037 0.970833     #> trait_cont2:env10             -0.1187163  0.3333231  -0.356 0.721721     #> trait_cont3:env1               0.0224383  0.2268712   0.099 0.921215     #> trait_cont3:env2               0.0197380  0.2373843   0.083 0.933734     #> trait_cont3:env3               0.1063384  0.3360710   0.316 0.751686     #> trait_cont3:env4               0.2250068  0.2545347   0.884 0.376700     #> trait_cont3:env5               0.0438643  0.2815770   0.156 0.876206     #> trait_cont3:env6               0.0931172  0.2868353   0.325 0.745456     #> trait_cont3:env7              -0.3698838  0.4171191  -0.887 0.375209     #> trait_cont3:env8              -0.2242540  0.4868664  -0.461 0.645081     #> trait_cont3:env9              -0.1435396  0.5033282  -0.285 0.775506     #> trait_cont3:env10              0.1991328  0.5354910   0.372 0.709990     #> trait_cont4:env1               0.0662273  0.1761968   0.376 0.707013     #> trait_cont4:env2               0.0482631  0.1848803   0.261 0.794054     #> trait_cont4:env3               0.0475713  0.2618060   0.182 0.855815     #> trait_cont4:env4               0.0558466  0.1984742   0.281 0.778419     #> trait_cont4:env5              -0.0079881  0.2180135  -0.037 0.970772     #> trait_cont4:env6               0.1322373  0.2240845   0.590 0.555109     #> trait_cont4:env7               0.0030004  0.3240575   0.009 0.992613     #> trait_cont4:env8              -0.0559403  0.3797565  -0.147 0.882891     #> trait_cont4:env9              -0.0373883  0.3919177  -0.095 0.923998     #> trait_cont4:env10             -0.2119408  0.4155868  -0.510 0.610066     #> trait_cont5:env1              -0.3157162  0.2076197  -1.521 0.128348     #> trait_cont5:env2              -0.0020636  0.2157308  -0.010 0.992368     #> trait_cont5:env3              -0.0658514  0.3077739  -0.214 0.830578     #> trait_cont5:env4               0.0134922  0.2354324   0.057 0.954300     #> trait_cont5:env5               0.0261295  0.2553548   0.102 0.918498     #> trait_cont5:env6               0.2519034  0.2647715   0.951 0.341402     #> trait_cont5:env7              -0.4533944  0.3789051  -1.197 0.231466     #> trait_cont5:env8               0.0661443  0.4466947   0.148 0.882284     #> trait_cont5:env9               0.0510576  0.4586971   0.111 0.911371     #> trait_cont5:env10              0.5789141  0.4873776   1.188 0.234907     #> trait_cont6:env1              -0.1881089  0.2447584  -0.769 0.442161     #> trait_cont6:env2               0.1347617  0.2537602   0.531 0.595378     #> trait_cont6:env3               0.1762242  0.3631814   0.485 0.627518     #> trait_cont6:env4              -0.1655427  0.2731632  -0.606 0.544501     #> trait_cont6:env5              -0.0584509  0.3052173  -0.192 0.848129     #> trait_cont6:env6               0.1809909  0.3105673   0.583 0.560045     #> trait_cont6:env7               0.0136916  0.4483815   0.031 0.975640     #> trait_cont6:env8              -0.0287384  0.5247439  -0.055 0.956324     #> trait_cont6:env9               0.1670829  0.5425820   0.308 0.758128     #> trait_cont6:env10             -0.0216889  0.5775002  -0.038 0.970041     #> trait_cont7:env1               0.0117718  0.1832154   0.064 0.948770     #> trait_cont7:env2              -0.2494385  0.1908231  -1.307 0.191155     #> trait_cont7:env3              -0.2403364  0.2736175  -0.878 0.379745     #> trait_cont7:env4               0.1897891  0.2073779   0.915 0.360095     #> trait_cont7:env5               0.0307101  0.2285526   0.134 0.893112     #> trait_cont7:env6               0.2824628  0.2343997   1.205 0.228185     #> trait_cont7:env7              -0.1028858  0.3374557  -0.305 0.760452     #> trait_cont7:env8              -0.0941266  0.3973214  -0.237 0.812732     #> trait_cont7:env9               0.0188233  0.4101149   0.046 0.963392     #> trait_cont7:env10              0.0654068  0.4330113   0.151 0.879936     #> trait_cont8:env1              -0.1719497  0.2425198  -0.709 0.478316     #> trait_cont8:env2              -0.2490949  0.2505595  -0.994 0.320148     #> trait_cont8:env3              -0.1298487  0.3597634  -0.361 0.718153     #> trait_cont8:env4              -0.0541162  0.2704139  -0.200 0.841384     #> trait_cont8:env5               0.1029516  0.3019067   0.341 0.733100     #> trait_cont8:env6               0.2066006  0.3083429   0.670 0.502835     #> trait_cont8:env7               0.0301432  0.4444334   0.068 0.945926     #> trait_cont8:env8               0.0388618  0.5189531   0.075 0.940306     #> trait_cont8:env9               0.0657501  0.5389646   0.122 0.902904     #> trait_cont8:env10              0.1524384  0.5715950   0.267 0.789708     #> trait_cont9:env1               0.0491704  0.1729237   0.284 0.776144     #> trait_cont9:env2              -0.1516373  0.1800992  -0.842 0.399807     #> trait_cont9:env3               0.0404439  0.2559539   0.158 0.874447     #> trait_cont9:env4               0.1468507  0.1926070   0.762 0.445799     #> trait_cont9:env5               0.1078422  0.2144027   0.503 0.614972     #> trait_cont9:env6               0.1373539  0.2175442   0.631 0.527790     #> trait_cont9:env7               0.0709711  0.3175835   0.223 0.823168     #> trait_cont9:env8              -0.1044847  0.3705180  -0.282 0.777946     #> trait_cont9:env9              -0.0241682  0.3826458  -0.063 0.949638     #> trait_cont9:env10             -0.0707903  0.4081366  -0.173 0.862300     #> trait_cont10:env1             -0.0161651  0.1675005  -0.097 0.923117     #> trait_cont10:env2             -0.0123918  0.1748189  -0.071 0.943490     #> trait_cont10:env3             -0.1351959  0.2499217  -0.541 0.588540     #> trait_cont10:env4             -0.0179706  0.1863072  -0.096 0.923158     #> trait_cont10:env5             -0.0960179  0.2093890  -0.459 0.646548     #> trait_cont10:env6              0.0523432  0.2122691   0.247 0.805227     #> trait_cont10:env7              0.1417525  0.3084044   0.460 0.645780     #> trait_cont10:env8              0.0911406  0.3615158   0.252 0.800959     #> trait_cont10:env9              0.1438915  0.3728547   0.386 0.699557     #> trait_cont10:env10            -0.1892620  0.3969231  -0.477 0.633488     #> trait_cat11grassland:env1     -0.2166084  0.3633703  -0.596 0.551102     #> trait_cat11wetland:env1       -0.2864278  0.4824768  -0.594 0.552739     #> trait_cat11grassland:env2      0.3342700  0.3784489   0.883 0.377094     #> trait_cat11wetland:env2       -0.0904607  0.5010602  -0.181 0.856730     #> trait_cat11grassland:env3      0.0548656  0.5379108   0.102 0.918759     #> trait_cat11wetland:env3        0.0121837  0.7162052   0.017 0.986427     #> trait_cat11grassland:env4     -0.1520046  0.4004652  -0.380 0.704265     #> trait_cat11wetland:env4        0.4100571  0.5381755   0.762 0.446096     #> trait_cat11grassland:env5     -0.0669323  0.4505183  -0.149 0.881895     #> trait_cat11wetland:env5       -0.0382453  0.6020639  -0.064 0.949350     #> trait_cat11grassland:env6     -0.4388071  0.4552669  -0.964 0.335123     #> trait_cat11wetland:env6       -0.1781153  0.6077280  -0.293 0.769458     #> trait_cat11grassland:env7     -0.1155986  0.6691581  -0.173 0.862846     #> trait_cat11wetland:env7        0.0118782  0.8885123   0.013 0.989334     #> trait_cat11grassland:env8      0.1636730  0.7758684   0.211 0.832923     #> trait_cat11wetland:env8       -0.1067334  1.0347932  -0.103 0.917848     #> trait_cat11grassland:env9     -0.1814162  0.8019406  -0.226 0.821029     #> trait_cat11wetland:env9       -0.1069967  1.0669591  -0.100 0.920120     #> trait_cat11grassland:env10     0.0621179  0.8608062   0.072 0.942473     #> trait_cat11wetland:env10       0.1178661  1.1409306   0.103 0.917719     #> trait_cat12nocturnal:env1     -0.0754443  0.2309471  -0.327 0.743915     #> trait_cat12nocturnal:env2     -0.0296988  0.2400987  -0.124 0.901557     #> trait_cat12nocturnal:env3      0.0047181  0.3406933   0.014 0.988951     #> trait_cat12nocturnal:env4      0.0006826  0.2569039   0.003 0.997880     #> trait_cat12nocturnal:env5     -0.1068315  0.2872327  -0.372 0.709942     #> trait_cat12nocturnal:env6      0.2186171  0.2904297   0.753 0.451608     #> trait_cat12nocturnal:env7     -0.4323136  0.4256436  -1.016 0.309786     #> trait_cat12nocturnal:env8      0.0687424  0.4939589   0.139 0.889319     #> trait_cat12nocturnal:env9      0.1660581  0.5108386   0.325 0.745128     #> trait_cat12nocturnal:env10     0.5392907  0.5458439   0.988 0.323155     #> trait_cat13multivoltine:env1   0.1368508  0.1909488   0.717 0.473566     #> trait_cat13univoltine:env1     0.2841505  0.2577352   1.102 0.270249     #> trait_cat13multivoltine:env2   0.0681931  0.1971593   0.346 0.729434     #> trait_cat13univoltine:env2    -0.0341924  0.2653602  -0.129 0.897474     #> trait_cat13multivoltine:env3  -0.0409377  0.2844874  -0.144 0.885580     #> trait_cat13univoltine:env3    -0.0574466  0.3794755  -0.151 0.879673     #> trait_cat13multivoltine:env4  -0.0495623  0.2158698  -0.230 0.818408     #> trait_cat13univoltine:env4     0.1227831  0.2886493   0.425 0.670566     #> trait_cat13multivoltine:env5  -0.1020816  0.2363995  -0.432 0.665873     #> trait_cat13univoltine:env5    -0.2213424  0.3186085  -0.695 0.487233     #> trait_cat13multivoltine:env6  -0.2882216  0.2432146  -1.185 0.235997     #> trait_cat13univoltine:env6     0.2284586  0.3278184   0.697 0.485862     #> trait_cat13multivoltine:env7  -0.0209723  0.3503083  -0.060 0.952261     #> trait_cat13univoltine:env7     0.0771967  0.4670323   0.165 0.868714     #> trait_cat13multivoltine:env8   0.0419555  0.4116171   0.102 0.918814     #> trait_cat13univoltine:env8     0.0414558  0.5478425   0.076 0.939681     #> trait_cat13multivoltine:env9  -0.0118302  0.4233286  -0.028 0.977705     #> trait_cat13univoltine:env9     0.3152771  0.5656912   0.557 0.577301     #> trait_cat13multivoltine:env10  0.0253027  0.4497710   0.056 0.955137     #> trait_cat13univoltine:env10   -0.2688425  0.6025053  -0.446 0.655447     #> trait_cat14generalist:env1     0.2606976  0.5164928   0.505 0.613737     #> trait_cat14nectarivore:env1   -0.2360857  0.3408356  -0.693 0.488518     #> trait_cat14generalist:env2     0.0418664  0.5331459   0.079 0.937409     #> trait_cat14nectarivore:env2   -0.0044629  0.3533997  -0.013 0.989924     #> trait_cat14generalist:env3    -0.0139439  0.7682749  -0.018 0.985519     #> trait_cat14nectarivore:env3    0.1527119  0.5020463   0.304 0.760992     #> trait_cat14generalist:env4     0.1510262  0.5776250   0.261 0.793737     #> trait_cat14nectarivore:env4    0.0284546  0.3790514   0.075 0.940161     #> trait_cat14generalist:env5    -0.2015317  0.6417709  -0.314 0.753503     #> trait_cat14nectarivore:env5   -0.0326672  0.4232302  -0.077 0.938476     #> trait_cat14generalist:env6    -0.3943444  0.6552377  -0.602 0.547285     #> trait_cat14nectarivore:env6   -0.0958633  0.4293834  -0.223 0.823335     #> trait_cat14generalist:env7     0.3523372  0.9512120   0.370 0.711078     #> trait_cat14nectarivore:env7    0.2099320  0.6256045   0.336 0.737198     #> trait_cat14generalist:env8    -0.0441667  1.1089876  -0.040 0.968232     #> trait_cat14nectarivore:env8   -0.2024453  0.7254215  -0.279 0.780189     #> trait_cat14generalist:env9     0.0889186  1.1459615   0.078 0.938152     #> trait_cat14nectarivore:env9    0.0925423  0.7521012   0.123 0.902071     #> trait_cat14generalist:env10   -0.2991912  1.2222034  -0.245 0.806614     #> trait_cat14nectarivore:env10   0.0601482  0.8030205   0.075 0.940292     #> trait_cat15resident:env1      -0.1558773  0.2696314  -0.578 0.563188     #> trait_cat15resident:env2       0.0972675  0.2779438   0.350 0.726373     #> trait_cat15resident:env3       0.0959809  0.4010530   0.239 0.810856     #> trait_cat15resident:env4      -0.1433718  0.3026179  -0.474 0.635663     #> trait_cat15resident:env5       0.0713967  0.3360772   0.212 0.831763     #> trait_cat15resident:env6      -0.0006126  0.3434115  -0.002 0.998577     #> trait_cat15resident:env7      -0.2809555  0.4952511  -0.567 0.570511     #> trait_cat15resident:env8       0.1465885  0.5809911   0.252 0.800803     #> trait_cat15resident:env9      -0.1148045  0.6007147  -0.191 0.848437     #> trait_cat15resident:env10      0.3813862  0.6369512   0.599 0.549327     #> trait_ord16:env1               0.0443858  0.0967309   0.459 0.646336     #> trait_ord16:env2               0.1264998  0.0999672   1.265 0.205723     #> trait_ord16:env3               0.0089911  0.1434370   0.063 0.950018     #> trait_ord16:env4              -0.1249036  0.1092007  -1.144 0.252708     #> trait_ord16:env5              -0.0327199  0.1190084  -0.275 0.783364     #> trait_ord16:env6              -0.1532371  0.1232035  -1.244 0.213583     #> trait_ord16:env7               0.0864534  0.1769544   0.489 0.625151     #> trait_ord16:env8               0.0561132  0.2077514   0.270 0.787085     #> trait_ord16:env9               0.0409145  0.2138390   0.191 0.848265     #> trait_ord16:env10             -0.1615596  0.2272823  -0.711 0.477188     #> trait_ord17:env1              -0.0508782  0.0650626  -0.782 0.434221     #> trait_ord17:env2               0.0673156  0.0678696   0.992 0.321277     #> trait_ord17:env3               0.0981880  0.0966602   1.016 0.309722     #> trait_ord17:env4               0.0150704  0.0720106   0.209 0.834230     #> trait_ord17:env5              -0.0461649  0.0803691  -0.574 0.565690     #> trait_ord17:env6               0.0522241  0.0822010   0.635 0.525218     #> trait_ord17:env7              -0.1098775  0.1196980  -0.918 0.358642     #> trait_ord17:env8              -0.0805842  0.1399392  -0.576 0.564715     #> trait_ord17:env9               0.1282283  0.1437985   0.892 0.372542     #> trait_ord17:env10              0.1133910  0.1545754   0.734 0.463214     #> trait_bin18:env1              -0.1179621  0.1877592  -0.628 0.529832     #> trait_bin18:env2               0.0410970  0.1953517   0.210 0.833375     #> trait_bin18:env3              -0.1774229  0.2786485  -0.637 0.524303     #> trait_bin18:env4               0.2552379  0.2089121   1.222 0.221803     #> trait_bin18:env5               0.1704284  0.2339985   0.728 0.466411     #> trait_bin18:env6              -0.1018293  0.2381233  -0.428 0.668919     #> trait_bin18:env7              -0.1197166  0.3440251  -0.348 0.727849     #> trait_bin18:env8               0.2359866  0.4016228   0.588 0.556812     #> trait_bin18:env9              -0.2244515  0.4160808  -0.539 0.589582     #> trait_bin18:env10              0.1134193  0.4424246   0.256 0.797674     #> trait_bin19:env1              -0.1452246  0.2360668  -0.615 0.538433     #> trait_bin19:env2               0.0131558  0.2494912   0.053 0.957946     #> trait_bin19:env3               0.1914155  0.3544992   0.540 0.589224     #> trait_bin19:env4              -0.2372310  0.2625524  -0.904 0.366231     #> trait_bin19:env5              -0.0486417  0.2962394  -0.164 0.869576     #> trait_bin19:env6               0.0364531  0.2983436   0.122 0.902753     #> trait_bin19:env7               0.1866480  0.4367544   0.427 0.669123     #> trait_bin19:env8               0.0871527  0.5111420   0.171 0.864612     #> trait_bin19:env9               0.1295414  0.5262485   0.246 0.805558     #> trait_bin19:env10              0.0354184  0.5621364   0.063 0.949761     #> trait_ord20medium:env1        -0.1718096  0.5230806  -0.328 0.742566     #> trait_ord20small:env1          0.2169684  0.3054409   0.710 0.477490     #> trait_ord20medium:env2        -0.1134164  0.5411585  -0.210 0.833995     #> trait_ord20small:env2          0.1796733  0.3127285   0.575 0.565606     #> trait_ord20medium:env3        -0.0666643  0.7776583  -0.086 0.931685     #> trait_ord20small:env3         -0.0540712  0.4546263  -0.119 0.905327     #> trait_ord20medium:env4        -0.2657073  0.5851281  -0.454 0.649756     #> trait_ord20small:env4         -0.3051708  0.3432778  -0.889 0.374008     #> trait_ord20medium:env5        -0.0077351  0.6507966  -0.012 0.990517     #> trait_ord20small:env5         -0.2466345  0.3796726  -0.650 0.515952     #> trait_ord20medium:env6         0.4155222  0.6624804   0.627 0.530514     #> trait_ord20small:env6          0.0448119  0.3876854   0.116 0.907979     #> trait_ord20medium:env7        -0.0706120  0.9624806  -0.073 0.941516     #> trait_ord20small:env7          0.0312668  0.5610285   0.056 0.955556     #> trait_ord20medium:env8         0.1203152  1.1207031   0.107 0.914506     #> trait_ord20small:env8          0.2136062  0.6563351   0.325 0.744838     #> trait_ord20medium:env9         0.0828510  1.1587777   0.071 0.943001     #> trait_ord20small:env9          0.0302249  0.6752415   0.045 0.964297     #> trait_ord20medium:env10        0.0412495  1.2358430   0.033 0.973373     #> trait_ord20small:env10        -0.3558163  0.7188480  -0.495 0.620613     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_9-simulate--predict-invaders","dir":"","previous_headings":"","what":"9. Simulate & Predict Invaders","title":"invasimap","text":"section demonstrates simulate trait profiles hypothetical invaders use fitted abundance model predict expected performance across sites. forms crucial part modern invasion biology workflows: moving theory-driven invader trait generation data-driven, site-level predictions establishment performance.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_91-simulate-hypothetical-invaders","dir":"","previous_headings":"9. Simulate & Predict Invaders","what":"9.1. Simulate hypothetical invaders","title":"invasimap","text":"evaluate potential invaders might perform, generate novel species resampling trait values empirical distribution resident pool using simulate_invaders() function. approach allows : Preserve realism keeping trait ranges levels identical observed resident community. Explore unobserved combinations (using column-wise sampling) maintain natural trait correlations (using row-wise sampling). Control numeric traits drawn - bootstrap observed values, draw truncated normal distribution, sample uniform distribution within observed bounds. default, traits sampled independently column (mode = \"columnwise\"), generates novel combinations. Alternatively, setting mode = \"rowwise\" samples entire resident profiles, preserving observed cross-trait covariance. Note: Use mode = \"rowwise\" want preserve realistic trait correlations. Use mode = \"columnwise\" exploring hypothetical trait combinations beyond observed.  ","code":"# Example: simulate 10 invaders from the resident trait table set.seed(42) inv_traits <- simulate_invaders(   resident_traits = spp_trait, # your resident species traits table   n_inv           = 10, # number of invaders to create   species_col     = \"species\", # ID column for species   mode            = \"columnwise\", # or \"rowwise\"   numeric_method  = \"bootstrap\", # or \"normal\", \"uniform\"   seed            = 42 )  head(inv_traits) #>      species trait_cont1 trait_cont2 trait_cont3 trait_cont4 trait_cont5 #> inv1    inv1  0.47317663  -0.9853317  0.02881542  -0.8287759  0.07475339 #> inv2    inv2  0.31398458   0.8114763  0.65631697   0.9252160  0.70096550 #> inv3    inv3  0.02842357   0.5693856  0.69937944   0.1272937  0.70096550 #> inv4    inv4 -0.08451645  -0.5846821  0.43871168   0.4797106  0.20694817 #> inv5    inv5  0.86934449   0.6658322  0.16320801   0.8660683  0.65788426 #> inv6    inv6 -0.21959307  -0.1060607  0.51908854   0.3348530  0.14695180 #>      trait_cont6 trait_cont7 trait_cont8 trait_cont9 trait_cont10 trait_cat11 #> inv1  -0.6596750  -0.3658933  0.06374887   0.9931054 -0.001454239      forest #> inv2   0.3603284   0.8361128 -0.77538352  -0.5086517 -0.957099543      forest #> inv3   0.4670559   0.8358081 -0.09737830  -0.8268388 -0.460567643     wetland #> inv4   0.3571857   0.4947222 -0.89374103  -0.8647264  0.881129756   grassland #> inv5  -0.8394711   0.4845329 -0.42450050  -0.6819552 -0.957099543   grassland #> inv6  -0.9418284  -0.3658933  0.67751007  -0.3726324 -0.623131341     wetland #>      trait_cat12  trait_cat13 trait_cat14 trait_cat15 trait_ord16 trait_ord17 #> inv1   nocturnal multivoltine detritivore   migratory           1           2 #> inv2   nocturnal   univoltine detritivore   migratory           3           2 #> inv3   nocturnal    bivoltine nectarivore   migratory           1           2 #> inv4   nocturnal multivoltine  generalist   migratory           1           2 #> inv5     diurnal    bivoltine nectarivore    resident           2           1 #> inv6     diurnal   univoltine  generalist   migratory           1           3 #>      trait_bin18 trait_bin19 trait_ord20 #> inv1           1           1       large #> inv2           0           1       small #> inv3           1           1      medium #> inv4           1           1      medium #> inv5           0           1      medium #> inv6           0           1       large"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_92-predict-abundances-across-all-sites","dir":"","previous_headings":"9. Simulate & Predict Invaders","what":"9.2. Predict abundances across all sites","title":"invasimap","text":"simulated invaders hand, use predict_invader_response() function generate expected abundances (performance proxy) every species-site combination. function: - Takes fitted model (e.g., glmmTMB, lme4, glm, gam) - Crosses species traits table (residents + simulated invaders) site environment table - Harmonizes factor levels model’s training data - Calls model’s native predict() method return: - full prediction grid (newdata) - long table predictions (predictions) - wide site × species prediction matrix (prediction_matrix) Note: use population-level (fixed-effects) predictions? - novel invaders, random-effect levels (e.g., species- site-specific intercepts) unknown. - Accordingly, predict_invader_response() defaults setting random effects zero, producing population-level predictions driven solely traits, environmental covariates, interactions. appropriate scale invasion screening comparative risk assessment. - Set include_random = TRUE require conditional predictions incorporate known random-effect levels fitted model (, supported, allow estimation new levels).  ","code":"# Combine residents and invaders into a single trait table all_traits <- bind_rows(   spp_trait, # Resident species traits (must include 'species' column)   inv_traits # Output from simulate_invaders() ) head(all_traits) #>                                               species trait_cont1 trait_cont2 #> Utetheisa pulchella               Utetheisa pulchella  0.02842357  -0.2030292 #> Danaus chrysippus orientis Danaus chrysippus orientis  0.03819190  -0.2237834 #> Telchinia serena                     Telchinia serena -0.83512488  -0.3065035 #> Vanessa cardui                         Vanessa cardui -0.21959307   0.5693856 #> Hypolimnas misippus               Hypolimnas misippus  0.31398458   0.6658322 #> Pieris brassicae                     Pieris brassicae -0.76502528  -0.1364975 #>                            trait_cont3 trait_cont4 trait_cont5 trait_cont6 #> Utetheisa pulchella        -0.99685889   0.4797106  0.87477170   0.8696459 #> Danaus chrysippus orientis  0.02882587  -0.5325932 -0.09453685  -0.7031068 #> Telchinia serena            0.02881542   0.9252160  0.26301460   0.3603284 #> Vanessa cardui              0.16320801   0.4664918  0.70096550   0.1009882 #> Hypolimnas misippus         0.51908854  -0.3895633 -0.99723831   0.5587363 #> Pieris brassicae           -0.71904181   0.4879493 -0.21005391   0.5576190 #>                            trait_cont7 trait_cont8 trait_cont9 trait_cont10 #> Utetheisa pulchella          0.5863824  -0.0973783   0.1228759  0.850091782 #> Danaus chrysippus orientis  -0.3658933  -0.8554938  -0.6567358 -0.001454239 #> Telchinia serena             0.8358081  -0.8781005  -0.8647264 -0.589900776 #> Vanessa cardui              -0.7333408   0.6775101  -0.8585562  0.773507196 #> Hypolimnas misippus          0.4594602  -0.7753835  -0.3726324 -0.623131341 #> Pieris brassicae             0.5380649   0.9354673  -0.9649034  0.429707387 #>                            trait_cat11 trait_cat12  trait_cat13 trait_cat14 #> Utetheisa pulchella            wetland     diurnal multivoltine detritivore #> Danaus chrysippus orientis   grassland     diurnal   univoltine detritivore #> Telchinia serena                forest   nocturnal multivoltine  generalist #> Vanessa cardui                  forest     diurnal   univoltine  generalist #> Hypolimnas misippus             forest     diurnal   univoltine nectarivore #> Pieris brassicae             grassland   nocturnal   univoltine  generalist #>                            trait_cat15 trait_ord16 trait_ord17 trait_bin18 #> Utetheisa pulchella          migratory           3           4           1 #> Danaus chrysippus orientis   migratory           1           4           1 #> Telchinia serena             migratory           2           5           1 #> Vanessa cardui                resident           3           3           0 #> Hypolimnas misippus           resident           1           4           0 #> Pieris brassicae              resident           1           2           0 #>                            trait_bin19 trait_ord20 #> Utetheisa pulchella                  1       small #> Danaus chrysippus orientis           1      medium #> Telchinia serena                     1       large #> Vanessa cardui                       0       large #> Hypolimnas misippus                  0       large #> Pieris brassicae                     0       large tail(all_traits) #>       species trait_cont1 trait_cont2 trait_cont3 trait_cont4 trait_cont5 #> inv5     inv5   0.8693445   0.6658322  0.16320801   0.8660683  0.65788426 #> inv6     inv6  -0.2195931  -0.1060607  0.51908854   0.3348530  0.14695180 #> inv7     inv7   0.4382245   0.9151532  0.38640964  -0.5656846 -0.99723831 #> inv8     inv8   0.2834910   0.6221103  0.51908854   0.5516467  0.70096550 #> inv9     inv9   0.4731766   0.8132028 -0.56722917   0.8849114 -0.09453685 #> inv10   inv10   0.6608953   0.4751912  0.02882587   0.1272937 -0.28866809 #>       trait_cont6 trait_cont7 trait_cont8 trait_cont9 trait_cont10 trait_cat11 #> inv5   -0.8394711  0.48453290 -0.42450050  -0.6819552  -0.95709954   grassland #> inv6   -0.9418284 -0.36589330  0.67751007  -0.3726324  -0.62313134     wetland #> inv7    0.2472269  0.72525955 -0.11440746   0.6410291   0.09924083      forest #> inv8   -0.6596750  0.53806485  0.03422211  -0.2932992  -0.33153735      forest #> inv9    0.5576190 -0.09622701  0.70386197  -0.3726324  -0.37790076   grassland #> inv10   0.5576190 -0.14501107 -0.11535072  -0.1572432  -0.33153735     wetland #>       trait_cat12  trait_cat13 trait_cat14 trait_cat15 trait_ord16 trait_ord17 #> inv5      diurnal    bivoltine nectarivore    resident           2           1 #> inv6      diurnal   univoltine  generalist   migratory           1           3 #> inv7    nocturnal multivoltine  generalist    resident           4           4 #> inv8      diurnal    bivoltine detritivore    resident           1           5 #> inv9      diurnal    bivoltine nectarivore   migratory           1           2 #> inv10     diurnal multivoltine detritivore    resident           1           4 #>       trait_bin18 trait_bin19 trait_ord20 #> inv5            0           1      medium #> inv6            0           1       large #> inv7            1           0       large #> inv8            0           1       small #> inv9            0           1      medium #> inv10           1           1      medium  # Predict across all sites × all species using predict_invader_response() pred <- predict_invader_response(   model          = mod,   species_traits = all_traits, # residents + invaders (traits)   site_env       = site_env, # base site predictors   species_col    = \"species\",   site_col       = \"site_id\",   response_type  = \"response\",   include_random = FALSE,   site_aug       = dplyr::select(spp_rich_obs, site_id, obs_sum, spp_rich) )  # Inspect outputs str(pred, max.level = 1) #> List of 3 #>  $ newdata          : tibble [15,355 × 36] (S3: tbl_df/tbl/data.frame) #>  $ predictions      :'data.frame':   15355 obs. of  3 variables: #>  $ prediction_matrix: num [1:415, 1:37] 2.27 1.77 2.99 2.08 1.78 ... #>   ..- attr(*, \"dimnames\")=List of 2 names(pred$newdata) # long table: site_id, species, pred #>  [1] \"species\"      \"site_id\"      \"trait_cont1\"  \"trait_cont2\"  \"trait_cont3\"  #>  [6] \"trait_cont4\"  \"trait_cont5\"  \"trait_cont6\"  \"trait_cont7\"  \"trait_cont8\"  #> [11] \"trait_cont9\"  \"trait_cont10\" \"trait_cat11\"  \"trait_cat12\"  \"trait_cat13\"  #> [16] \"trait_cat14\"  \"trait_cat15\"  \"trait_ord16\"  \"trait_ord17\"  \"trait_bin18\"  #> [21] \"trait_bin19\"  \"trait_ord20\"  \"x\"            \"y\"            \"env1\"         #> [26] \"env2\"         \"env3\"         \"env4\"         \"env5\"         \"env6\"         #> [31] \"env7\"         \"env8\"         \"env9\"         \"env10\"        \"obs_sum\"      #> [36] \"spp_rich\" head(pred$predictions) # long table: site_id, species, pred #>   site_id             species     pred #> 1    1026 Utetheisa pulchella 1.761536 #> 2    1027 Utetheisa pulchella 1.561990 #> 3    1028 Utetheisa pulchella 1.771892 #> 4    1029 Utetheisa pulchella 1.364692 #> 5    1030 Utetheisa pulchella 1.843295 #> 6    1031 Utetheisa pulchella 1.359066 dim(pred$prediction_matrix) # sites × species matrix (for fitness/impact/risk calcs) #> [1] 415  37"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_10-biotic--abiotic-constraints","dir":"","previous_headings":"","what":"10. Biotic & Abiotic Constraints","title":"invasimap","text":"Understanding trait similarity (biotic constraint) environmental matching (abiotic constraint) shape invasion outcomes requires explicit, quantitative representations processes. section details three linked steps: Constructing general trait-based interaction strength matrix gij()g^{\\mathrm{()}}_{ij} Deriving competition coefficients αij\\alpha_{ij} underlying trait dissimilarities dijd_{ij} Quantifying environmental matching via species’ optima Ke(Δjs;σe)K_e(\\Delta_{js};\\sigma_e)","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_101-interaction-strength","dir":"","previous_headings":"10. Biotic & Abiotic Constraints","what":"10.1 Interaction Strength","title":"invasimap","text":"general trait-based interaction strength gij()g^{\\mathrm{()}}_{ij} (g_all) quantifies dissimilarity trait vectors 𝐭i\\mathbf{t}_i 𝐭j\\mathbf{t}_j two species ii jj. g()g^{\\mathrm{()}} computed Gower distance, numerically identical dijd_{ij}. also compute resident × site abundance matrix Njs*N^{*}_{js} (Nstar), representing predicted equilibrium abundance resident species jj site ss. compute_interaction_strength() outputs: d_ij — trait dissimilarity matrix (residents + invaders) Nstar — resident × site abundance matrix pred$predictions","code":"# Identify all resident species (excluding invaders) residents <- rownames(spp_trait)  # Compute interaction strengths and resident abundance matrix cis <- compute_interaction_strength(   traits      = all_traits, # residents + invaders   predDF      = pred$predictions, # predictions from predict_invader_response()   method      = \"gower\", # mixed traits   kernel      = \"distance\", # keep as dissimilarity   standardise = FALSE, # Gower is already [0,1]   sparsify_k  = NULL # no sparsification for now )  # site × resident abundance matrix # - Nstar is built from predictions and restricted to resident species. Nstar <- cis$Nstar # site × residents head(Nstar[1:2, 1:4]) #>                                1026     1027     1028     1029 #> Utetheisa pulchella        1.761536 1.561990 1.771892 1.364692 #> Danaus chrysippus orientis 3.239507 3.001678 3.677266 3.446281  # trait-based distances/dissimilarities (interaction strengths) # - g_all[i, j] is the trait dissimilarity between species i and j. g_all <- cis$g_all # species × species tail(g_all[1:2, 1:4]) #>                            Utetheisa pulchella Danaus chrysippus orientis #> Utetheisa pulchella                   0.000000                   0.398072 #> Danaus chrysippus orientis            0.398072                   0.000000 #>                            Telchinia serena Vanessa cardui #> Utetheisa pulchella               0.4164589      0.5341222 #> Danaus chrysippus orientis        0.4409018      0.5248909"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_102-competition","dir":"","previous_headings":"10. Biotic & Abiotic Constraints","what":"10.2 Competition","title":"invasimap","text":"trait dissimilarities dijd_{ij} (obtained gij()g^{\\mathrm{()}}_{ij} distance matrix), derive trait-based competition coefficients αij\\alpha_{ij} using Gaussian trait kernel. compute_competition_kernel() outputs: a_ij — invader × resident competition coefficients αij\\alpha_{ij} sigma_t — bandwidth parameter used σt\\sigma_t d_ij — distances used kernel Note: * High trait similarity (low dijd_{ij}) → strong competition (high αij\\alpha_{ij}) * High trait difference (high dijd_{ij}) → weak competition (low αij\\alpha_{ij}) * Lowering σt\\sigma_t sharpens niche separation; useful sensitivity tests * Ensure g_all distance matrix applying Gaussian kernel; ’s already kernelised, retrieve original dijd_{ij} first  ","code":"# --- Competition coefficients from trait distances --- comp <- compute_competition_kernel(   g_all = g_all, # trait distance matrix (e.g., Gower)   residents = residents, # resident IDs   # invaders = paste0(\"inv\", 1:n_inv),  # optional; default = non-residents   # sigma_t  = NULL,             # optional; auto from resident-resident distances   sigma_method = \"sd\" # or \"median\", \"iqr\" )  sigma_t <- comp$sigma_t # bandwidth used d_ij <- comp$d_ij # invader-resident distances a_ij <- comp$a_ij # Gaussian competition coefficients  sigma_t #> [1] 0.08758267 head(d_ij[1:4, 1:4]) #>      Utetheisa pulchella Danaus chrysippus orientis Telchinia serena #> inv1           0.4428054                  0.3371734        0.3626310 #> inv2           0.4224789                  0.4655103        0.3639053 #> inv3           0.4136122                  0.4075364        0.3784909 #> inv4           0.3899103                  0.3182808        0.2564511 #>      Vanessa cardui #> inv1      0.5756327 #> inv2      0.4594073 #> inv3      0.5894313 #> inv4      0.5408265 head(a_ij[1:4, 1:4]) #>      Utetheisa pulchella Danaus chrysippus orientis Telchinia serena #> inv1        2.814174e-06               6.049429e-04     1.894032e-04 #> inv2        8.856219e-06               7.337331e-07     1.783117e-04 #> inv3        1.435855e-05               1.987671e-05     8.803305e-05 #> inv4        4.968745e-05               1.356017e-03     1.374756e-02 #>      Vanessa cardui #> inv1   4.167436e-10 #> inv2   1.060064e-06 #> inv3   1.461412e-10 #> inv4   5.247268e-09  # Example use with N* (from Section 7.1): # For invader i at site s, total expected competitive pressure (scalar) could be: #   pressure_{i,s} = sum_j a_{ij} * N*_j,s # which combines trait overlap (a_ij) with resident context (N*)."},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_103-environmental-filtering","dir":"","previous_headings":"10. Biotic & Abiotic Constraints","what":"10.3 Environmental Filtering","title":"invasimap","text":"estimate species’ environmental optimum predicted abundances site-level environmental variables, compute site–species distances Δjs\\Delta_{js}. converted Gaussian environmental similarity kernel Ke(Δjs;σe)K_e(\\Delta_{js};\\sigma_e) using bandwidth σe\\sigma_e. compute_environment_kernel() outputs: env_opt — species × environmental optima env_dist — site × species environmental distances K_env — Gaussian environmental similarity kernel Note: environmental kernel context, matrices directly used invasion fitness computation Section 8.  ","code":"# Build environmental kernel and distances ek <- compute_environment_kernel(   site_env = site_env, # site_id, x, y, env1:env10, ...   predictions = pred$predictions, # species, site_id, pred (from predict_invader_response)   site_col = \"site_id\",   method = \"gower\",   kernel = \"gaussian\", # \"distance\" or \"similarity\" also supported   sigma_method = \"sd\" # or \"median\", \"iqr\" )  sigma_e <- ek$sigma_e # bandwidth used for Gaussian kernel env_opt <- ek$env_opt # species × env (optima) env_dist <- ek$env_dist # sites × species (distance) g_env <- ek$K_env # sites × species (Gaussian similarity), if requested  sigma_e #> [1] 0.0495915 head(env_opt[1:4, 1:4]) #>                                   env1        env2        env3       env4 #> Utetheisa pulchella        -0.45572568 -0.25326724 -0.05813116  0.1956375 #> Danaus chrysippus orientis -0.09139371 -0.19942460  0.22554528  0.1762052 #> Telchinia serena           -0.15295732 -0.10760847  0.16373671  0.2630910 #> Vanessa cardui              0.17546879 -0.03901351  0.02578274 -0.1113054 head(env_dist[1:4, 1:4]) #>      Utetheisa pulchella Danaus chrysippus orientis Telchinia serena #> 1026           0.2919083                  0.2901035        0.2891394 #> 1027           0.3004139                  0.2986090        0.2976450 #> 1028           0.3051308                  0.3033259        0.3023619 #> 1029           0.3230038                  0.3211989        0.3202349 #>      Vanessa cardui #> 1026      0.2443649 #> 1027      0.2528705 #> 1028      0.2575874 #> 1029      0.2754604 head(g_env[1:4, 1:4]) #>      Utetheisa pulchella Danaus chrysippus orientis Telchinia serena #> 1026        2.994181e-08               3.707048e-08     4.152730e-08 #> 1027        1.075079e-08               1.339372e-08     1.505410e-08 #> 1028        6.015103e-09               7.519820e-09     8.467670e-09 #> 1029        6.137287e-10               7.773871e-10     8.815289e-10 #>      Vanessa cardui #> 1026   5.339339e-06 #> 1027   2.259750e-06 #> 1028   1.385049e-06 #> 1029   1.996438e-07"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_11-invasion-fitness","dir":"","previous_headings":"","what":"11. Invasion Fitness","title":"invasimap","text":"invasion fitness hypothetical invader site determined combining predicted growth potential risr_{}, summed effect trait-based competition Cis(raw)C^{\\mathrm{(raw)}}_{}, degree environmental matching Ke(Δjs;σe)K_e(\\Delta_{js};\\sigma_e).","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_111-competitive-pressure-with-environmental-context","dir":"","previous_headings":"11. Invasion Fitness","what":"11.1 Competitive Pressure with Environmental Context","title":"invasimap","text":"site ss, invader ii, resident jj, impact tensor IijsI_{ijs} combines: competition coefficient αij\\alpha_{ij} environmental similarity kernel Ke(Δjs;σe)K_e(\\Delta_{js};\\sigma_e) equilibrium abundance Njs*N^{*}_{js} assemble_matrices() outputs: I_raw — [Iijs][I_{ijs}] impact tensor pressure_inv_site — total competitive pressure per invader × site C_raw — total raw competitive penalty [Cis(raw)][C^{\\mathrm{(raw)}}_{}]","code":"# Assemble site- and species-specific competition/impact matrices am <- assemble_matrices(   a_ij            = comp$a_ij, # invader × resident competition coefficients   Nstar           = cis$Nstar, # resident abundances (residents × sites)   predictions     = pred$predictions, # provides invader r_is (sites × invaders) if needed   K_env           = ek$K_env # environmental kernel (sites × residents), or env_dist + sigma_e   # env_dist        = ek$env_dist,      # OR Pass distances and σ to compute the Gaussian kernel internally   # sigma_e         = ek$sigma_e )  # Check results str(am, max.level = 1) #> List of 3 #>  $ I_raw            : num [1:10, 1:27, 1:415] 1.35e-12 1.06e-11 3.40e-12 7.14e-12 2.01e-16 ... #>   ..- attr(*, \"dimnames\")=List of 3 #>  $ pressure_inv_site: num [1:10, 1:415] 5.39e-07 1.45e-06 1.23e-06 5.49e-07 1.57e-05 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ meta             :List of 6  # 3D impact tensor: [invader, resident, site] dim(am$I_raw) #> [1]  10  27 415  # Total competitive pressure per invader × site (sum over residents) pressure <- am$pressure_inv_site dim(pressure) # invaders × sites #> [1]  10 415"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_112-invasion-fitness-calculation","dir":"","previous_headings":"11. Invasion Fitness","what":"11.2 Invasion Fitness Calculation","title":"invasimap","text":"Given Cis(raw)C^{\\mathrm{(raw)}}_{} predicted growth risr_{}, invasion fitness λis\\lambda_{} computed following definition Section 1, possible scaling transformation variants: Raw penalty: λis(raw)=ris−Cis(raw)\\lambda^{(\\mathrm{raw})}_{} = r_{} - C^{(\\mathrm{raw})}_{}   Richness-scaled: λis(scaled)=ris−Cis(raw)Js\\lambda^{(\\mathrm{scaled})}_{} = r_{} - \\frac{C^{(\\mathrm{raw})}_{}}{J_s}, JsJ_s resident richness site ss.   Relative-abundance weighted: λis(rel)=ris−(∑jaijNjs(rel))\\lambda^{(\\mathrm{rel})}_{} = r_{} - \\left( \\sum_j a_{ij} N^{(\\mathrm{rel})}_{js} \\right)   Logistic penalty (bounded): λis(logis)=ris−inv_logit(k[Ctarget,−x0])\\lambda^{(\\mathrm{logis})}_{} = r_{} - \\mathrm{inv\\_logit}\\!\\left(k \\left[C_{\\mathrm{target},} - x_0\\right]\\right)   compute_invasion_fitness() outputs: C_raw — [Cis(raw)][C^{\\mathrm{(raw)}}_{}] penalty matrix (depending variant) lambda — chosen fitness variant [λis][\\lambda_{}] diagram shows information flow raw interaction strengths final invasion fitness. Conceptual flow","code":"# Compute invasion fitness (uses am$I_raw from assemble_matrices and pred$predictions) fitness <- compute_invasion_fitness(   I_raw        = am$I_raw, # or pressure_inv_site = am$pressure_inv_site   predictions  = pred$predictions, # builds r_mat internally   a_ij         = comp$a_ij, # needed for lambda_rel / logistic_on = \"rel\"   Nstar        = cis$Nstar,   logistic_on  = \"rel\", # cap the A %*% N_rel penalty   k            = 1,   x0           = NULL, # auto: median penalty   prefer       = \"logis\" # returned as $lambda )  # Check results str(fitness, max.level = 1) #> List of 8 #>  $ C_raw        : num [1:10, 1:415] 5.39e-07 1.45e-06 1.23e-06 5.49e-07 1.57e-05 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ r_mat        : num [1:10, 1:415] 9.09 22.79 4.49 2.73 7.63 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ lambda_raw   : num [1:10, 1:415] 9.09 22.79 4.49 2.73 7.63 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ lambda_scaled: num [1:10, 1:415] 9.09 22.79 4.49 2.73 7.63 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ lambda_rel   : num [1:10, 1:415] 9.09 22.79 4.49 2.72 7.63 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ lambda_logis : num [1:10, 1:415] 8.59 22.29 3.99 2.23 7.13 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ lambda       : num [1:10, 1:415] 8.59 22.29 3.99 2.23 7.13 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ meta         :List of 5  # Key outputs C_raw <- fitness$C_raw # invader × site penalty lambda_mat <- fitness$lambda # final invasion fitness (invader × site)  # Inspect invasion fitness matrix dim(lambda_mat) # invaders × sites #> [1]  10 415 #> I_raw  (invader x resident x site) #>     │  Sum over residents (j) #>     ▼ #>  C_raw  (invader x site) #>     │  Subtract from predicted growth r_mat #>     ▼ #>  λ (invasion fitness) variants #>     │ #>     ├── λ_raw       = r - C_raw #>     ├── λ_scaled    = r - (C_raw / J) #>     ├── λ_rel       = r - (A %*% N_rel) #>     └── λ_logis     = r - inv_logit( k * (C_target - x0) )"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_12-visualisation-ranking--clustering","dir":"","previous_headings":"","what":"12. Visualisation, Ranking & Clustering","title":"invasimap","text":"section summarises invasion fitness outcomes using plots rankings diagnose invaders locations pose greatest establishment risk, show risk distributed across study region, support hypothesis generation management prioritisation.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_121-invasion-fitness-matrix-invader--site","dir":"","previous_headings":"12. Visualisation, Ranking & Clustering","what":"12.1 Invasion Fitness Matrix (invader × site)","title":"invasimap","text":"visualise invasion fitness matrix λ_mat, entry λis\\lambda_{} represents low-density per-capita growth rate invader ii site ss computed compute_invasion_fitness(). matrix central invasion framework enables: Direct comparison simulated invaders across sites. Identification susceptible sites (rows/columns consistently high λis\\lambda_{}). Detection broadly adapted invaders versus specialists. Ecological interpretation: Higher λis\\lambda_{} (lighter colours) → favourable conditions /weak competition. Lower λis\\lambda_{} (darker colours) → strong competitive exclusion /poor environmental match.  figure serves diagnostic map invasibility invader performance, feeding later steps like risk ranking, vulnerability hotspot mapping, scenario testing.","code":"# Convert the invasion fitness matrix to long format for ggplot and attach spatial coordinates lambda_df <- as_tibble(lambda_mat, rownames = \"invader\") %>%   # Reshape from wide (invader × site) to long (invader, site, fitness value)   pivot_longer(-invader, names_to = \"site_id\", values_to = \"lambda\") %>%   # Add spatial coordinates for each site, matched by site_id   mutate(     x = site_xy$x[match(site_id, site_xy$site_id)], # Longitude/Easting     y = site_xy$y[match(site_id, site_xy$site_id)] # Latitude/Northing   )  # # Visualize the full invader × site invasion fitness matrix as a heatmap # ggplot(lambda_df, aes(x = site_id, y = invader, fill = lambda)) + #   geom_tile(color = \"grey90\") +  # Draw grid with light borders for readability #   scale_fill_viridis_c(option = \"magma\", # Use perceptually uniform color palette (magma) #     direction = -1, # Reverse so high = bright/light #     name = expression(\"Invasion fitness\" ~ lambda[i*k])) + #   labs(title = \"Invasion Fitness Matrix: Invaders Across Sites\",  # Plot title #        x = \"Site\",                                                # X-axis: sites #        y = \"Invader\") +                                           # Y-axis: invaders #   theme_minimal(base_size = 12) + #   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 8),  # Vertical site labels #         axis.text.y = element_text(size = 8),                           # Compact invader labels #         panel.grid = element_blank()                                    # Remove grid lines for clarity #   )  # Orders: sites by space; invaders by mean lambda site_order <- site_xy$site_id[order(site_xy$x, site_xy$y)] inv_order <- lambda_df |>   group_by(invader) |>   summarise(mu = mean(lambda, na.rm = TRUE), .groups = \"drop\") |>   arrange(desc(mu)) |>   pull(invader)  lambda_df <- lambda_df |>   mutate(     site_id = factor(site_id, levels = site_order),     invader = factor(invader, levels = inv_order)   )  # 2) Color scaling: winsorize high tail (or set trans = \"sqrt\") cap <- quantile(lambda_df$lambda, 0.99, na.rm = TRUE)  # library(scales) ggplot(lambda_df, aes(x = site_id, y = invader, fill = pmin(lambda, cap))) +   geom_raster() + # faster, cleaner than geom_tile with borders   scale_fill_viridis_c(     option = \"magma\", direction = -1,     limits = c(0, cap), oob = scales::squish,     name = expression(\"Invasion fitness\" ~ lambda[i * k])   ) +   labs(     title = \"Invasion Fitness Matrix: Invaders Across Sites\",     x = \"Site\", y = \"Invader\"   ) +   theme_minimal(base_size = 10) +   theme(     panel.grid = element_blank(),     axis.text.y = element_text(size = 8),     axis.text.x = element_text(angle = 90, vjust = 0.5, size = 6)   ) +   # 3) show every Nth site label to avoid overlap   scale_x_discrete(     breaks = function(x) x[seq(1, length(x), by = 10)]   ) +   guides(fill = guide_colorbar(     title.position = \"top\",     barheight = unit(40, \"mm\"),     barwidth = unit(4, \"mm\")   ))"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_122-invader-invasiveness-ranking","dir":"","previous_headings":"12. Visualisation, Ranking & Clustering","what":"12.2 Invader Invasiveness Ranking","title":"invasimap","text":"invasion fitness matrix λ_mat, derive species-level invasiveness IiI_i, defined mean (sum) λis\\lambda_{} sites invader ii. integrates biotic resistance environmental filtering across full landscape, producing single quantitative measure establishment potential. Ranking invaders IiI_i reveals: High-risk “super-invaders” — species high geographically broad λis\\lambda_{}, posing widespread establishment potential. Low-risk invaders — species predicted strongly excluded sites. rankings valuable risk prioritisation, focusing management surveillance species likely succeed current conditions. plots, bar height represents cumulative λis\\lambda_{} (summed sites), ordered highest lowest IiI_i.","code":"# Sum invasion fitness across sites for each invader and order from highest to lowest rank_df <- lambda_df %>%   group_by(invader) %>%   summarise(total_lambda = sum(lambda, na.rm = TRUE)) %>%   arrange(desc(total_lambda)) %>%   mutate(invader = factor(invader, levels = invader))  # Bar plot of total invasion fitness by invader ggplot(   rank_df,   aes(x = invader, y = sqrt(total_lambda), fill = sqrt(total_lambda)) ) +   geom_col(width = 0.7, color = \"grey50\") +   scale_fill_viridis_c(     option = \"inferno\",     name = expression(\"Total fitness\" ~ sum(lambda[i]))   ) +   labs(     title = \"Invader Ranking by Total Growth Potential\",     x = \"Invader\",     y = expression(\"Total invasion fitness \" * sum(lambda[i * k]))   ) +   theme_minimal(base_size = 12) +   theme(     axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),     panel.grid.major.x = element_blank(),     legend.position = \"top\"   )"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_123-site-level-invasibility-metrics","dir":"","previous_headings":"12. Visualisation, Ranking & Clustering","what":"12.3 Site-level Invasibility Metrics","title":"invasimap","text":"summarise λ_mat across invaders quantify site-level invasibility VsV_s — openness community establishment. site ss, compute: Proportion invaders positive fitness — fraction invaders λis>0\\lambda_{} > 0. Count successful invaders — number ii λis>0\\lambda_{} > 0. Mean invasion fitness — average λis\\lambda_{} across invaders, indicating general establishment potential. Spatial mapping VsV_s reveals: Hotspots — sites high proportions positive λis\\lambda_{}, indicating low biotic resistance /favourable abiotic conditions. Potential refugia — sites low proportions, community structure environmental context limits establishment. Tile labels often show counts successful invaders complement proportional risk absolute numbers.","code":"# Summarize invasion fitness at each site: site_sum <- lambda_df %>%   group_by(site_id, x, y) %>%   summarize(     mean_l   = mean(lambda), # Mean invasion fitness across invaders     prop_pos = mean(lambda > 0), # Proportion of invaders with positive fitness     cnt_pos  = sum(lambda > 0), # Number of successful invaders     cnt_neg  = sum(lambda < 0) # Number of unsuccessful invaders   ) %>%   ungroup()  # Map proportion of successful invaders at each site ggplot(site_sum, aes(x = x, y = y, fill = prop_pos)) +   geom_tile(color = NA) +   geom_sf(data = rsa, inherit.aes = FALSE, fill = NA, color = \"black\", size = 0.5) +   scale_fill_viridis_c(     option = \"rocket\",     labels = scales::percent_format(accuracy = 1),     name = \"% Invaders with\\nPositive Fitness\"   ) +   geom_text(aes(label = cnt_pos), color = \"white\", size = 2.5) +   coord_sf() +   labs(     title = \"Site-level Invasibility (Proportion of Successful Invaders)\",     x = \"Longitude\", y = \"Latitude\"   ) +   theme_minimal(base_size = 12) +   theme(panel.grid = element_blank())"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_124-mean-invasion-fitness-by-site","dir":"","previous_headings":"12. Visualisation, Ranking & Clustering","what":"12.4 Mean Invasion Fitness by Site","title":"invasimap","text":"map mean invasion fitness across invaders site — average λis\\lambda_{} ii given site ss. provides continuous index community openness, complementing proportion-based VsV_s: High mean values — communities generally favourable broad range potential invaders. Low mean values — communities broadly resistant due environmental mismatch, strong resident competition, . Sites moderately high mean values low VsV_s may vulnerable highly adapted invaders — pattern worth targeted monitoring.","code":"# Map the mean invasion fitness of all invaders at each site ggplot(site_sum, aes(x = x, y = y, fill = mean_l)) +   geom_tile(color = NA) +   geom_sf(data = rsa, inherit.aes = FALSE, fill = NA, color = \"black\", size = 0.5) +   scale_fill_viridis_c(option = \"turbo\", name = \"Mean invasion\\nfitness\") +   # Optional: annotate with number of successful invaders   # geom_text(aes(label = cnt_pos), color = \"white\", size = 1.5) +   coord_sf() +   labs(     title = \"Mean Species Invasiveness by Site (All Invaders)\",     x = \"Longitude\",     y = \"Latitude\"   ) +   theme_minimal(base_size = 12) +   theme(panel.grid = element_blank())"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_125-clustering-and-risk-scenarios","dir":"","previous_headings":"12. Visualisation, Ranking & Clustering","what":"12.5 Clustering and Risk Scenarios","title":"invasimap","text":"identify clusters sites invaders similar invasion fitness patterns using hierarchical clustering λis\\lambda_{} λ_mat. reveals ecological “syndromes” — types sites risk, types invaders threatening — enabling targeted surveillance intervention.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_1251-hierarchical-clustering-of-invaders-and-sites","dir":"","previous_headings":"12. Visualisation, Ranking & Clustering > 12.5 Clustering and Risk Scenarios","what":"12.5.1 Hierarchical Clustering of Invaders and Sites","title":"invasimap","text":"Hierarchical clustering groups: Rows (invaders) similarity λis\\lambda_{} profiles across sites. Columns (sites) similarity λis\\lambda_{} profiles across invaders. heatmap displays λis\\lambda_{} values cells, dendrograms indicating clusters. approach distinguishes: Invader types — e.g., broad-spectrum high-risk vs. site-specialists. Site types — e.g., broadly open vs. strongly resistant communities. groups can used categorical risk classification scenario exploration downstream analyses.","code":"library(pheatmap)  # Remove invaders (rows) and sites (columns) with all NA values (if present) # This ensures only meaningful data are visualized and clustered lambda_mat_noNA <- lambda_mat[   rowSums(is.na(lambda_mat)) < ncol(lambda_mat),   colSums(is.na(lambda_mat)) < nrow(lambda_mat) ]  # Clustered heatmap of invasion fitness matrix (invader × site) # - Each cell shows the invasion fitness (lambda) for a given invader-site pair # - Hierarchical clustering groups similar invaders and similar sites pheatmap(lambda_mat_noNA,   color = rev(viridis::viridis(100, option = \"viridis\")),   clustering_distance_rows = \"euclidean\",   clustering_distance_cols = \"euclidean\",   clustering_method = \"complete\",   fontsize_row = 8, fontsize_col = 8,   main = \"Clustered Invasion Fitness Matrix (Invader × Site)\",   angle_col = 45 ) # Assign invaders and sites to discrete clusters (syndromes) for downstream visualization # Sites: cluster by invasion fitness profile (columns) # Don’t force equal-width bands (let the data pick k) --> site_dist <- dist(t(scale(lambda_mat_noNA))) # standardize first then compute pairwise distances between sites site_clust <- hclust(site_dist, method = \"ward.D2\") # Hierarchical clustering kj <- factoextra::fviz_nbclust(t(scale(lambda_mat_noNA)), kmeans, method = \"silhouette\") # or gap site_groups <- cutree(site_clust, k = 5) # Assign each site to one of 5 clusters  # Invaders: cluster by fitness profile across sites (rows) invader_dist <- dist(scale(lambda_mat_noNA)) # Scale then compute pairwise distances between invaders invader_clust <- hclust(invader_dist, method = \"ward.D2\") ki <- factoextra::fviz_nbclust(t(scale(lambda_mat_noNA)), kmeans, method = \"silhouette\") # or gap invader_groups <- cutree(invader_clust, k = 5) # Assign each invader to one of 5 clusters  # Attach cluster labels to site and invader summary dataframes # Add site cluster group to site summary dataframe (site_sum) # site_id must match the column names of lambda_mat_noNA site_sum$site_cluster <- factor(site_groups[site_sum$site_id])  # Add invader cluster group to long-form fitness dataframe (lambda_df) # invader must match the row names of lambda_mat_noNA lambda_df$invader_cluster <- factor(invader_groups[lambda_df$invader])  # These cluster assignments can be used for: # - Color-coding sites and invaders in subsequent plots # - Group-based analyses or statistical comparisons # - Mapping spatial patterns of invasion risk by ecological “syndrome”"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_1252-mapping-site-level-risk-categories","dir":"","previous_headings":"12. Visualisation, Ranking & Clustering > 12.5 Clustering and Risk Scenarios","what":"12.5.2 Mapping Site-level Risk Categories","title":"invasimap","text":"Cluster assignments converted descriptive invasibility categories (e.g., -high, high, medium, low, -low) based mean λis\\lambda_{} within cluster. High-risk site categories — clusters generally high VsV_s high mean λis\\lambda_{}. Low-risk site categories — clusters low VsV_s consistently negative low λis\\lambda_{}. Mapping categories provides spatial overview invasibility syndromes, highlighting geographic concentrations risk. Parallel invader-category assignments allow alignment high-risk invaders high-risk sites targeted management scenarios.","code":"# ------------------------------- # 1) INVADER CATEGORIES (unchanged) # ------------------------------- invader_summary <- lambda_df %>%   dplyr::group_by(invader, invader_cluster) %>%   dplyr::summarise(mean_lambda = mean(lambda, na.rm = TRUE), .groups = \"drop\")  cluster_means <- invader_summary %>%   dplyr::group_by(invader_cluster) %>%   dplyr::summarise(cluster_mean = mean(mean_lambda, na.rm = TRUE)) %>%   dplyr::arrange(dplyr::desc(cluster_mean))  category_labels <- c(\"very-high\", \"high\", \"medium\", \"low\", \"very-low\")[1:nrow(cluster_means)] cluster_map <- stats::setNames(category_labels, cluster_means$invader_cluster)  invader_summary <- invader_summary %>%   dplyr::mutate(invader_category = factor(cluster_map[as.character(invader_cluster)],     levels = category_labels   ))  lambda_df <- lambda_df %>%   dplyr::mutate(invader_category = factor(cluster_map[as.character(invader_cluster)],     levels = category_labels   ))  # ------------------------------------------------------------- # 2) SITE GROUPING: pick *one* method to reduce \"stripey\" maps #    Choices: #      \"quantile\"   – gradient bins of mean fitness (recommended default) #      \"pca_kmeans\" – PCA (on λ profiles) + k-means (k via silhouette) #      \"clustgeo\"   – spatially-constrained Ward clustering (needs ClustGeo) #      \"hc_sil\"     – Ward hierarchical on standardized λ with k via silhouette # ------------------------------------------------------------- site_grouping_method <- \"quantile\" # = change to \"pca_kmeans\", \"clustgeo\", or \"hc_sil\"  # Build λ matrix with aligned columns = site_id, rows = invaders # (Assumes you have lambda_mat already; otherwise widen lambda_df) lambda_mat_noNA <- lambda_mat[   rowSums(is.na(lambda_mat)) < ncol(lambda_mat),   colSums(is.na(lambda_mat)) < nrow(lambda_mat) ]  # Utility: safe match coords for columns (sites) site_coords <- site_sum[match(colnames(lambda_mat_noNA), site_sum$site_id), c(\"x\", \"y\")]  # ------------------- # A) Quantile method # ------------------- if (site_grouping_method == \"quantile\") {   brks <- quantile(site_sum$mean_l, probs = seq(0, 1, 0.2), na.rm = TRUE)   labs <- c(\"very-low\", \"low\", \"medium\", \"high\", \"very-high\")   site_sum <- site_sum %>%     dplyr::mutate(site_category = cut(mean_l,       breaks = brks,       include.lowest = TRUE, labels = labs     )) }  # ------------------------------ # B) PCA + k-means (silhouette) # ------------------------------ if (site_grouping_method == \"pca_kmeans\") {   # standardize λ columns (sites) across invaders before PCA   X <- scale(t(lambda_mat_noNA)) # sites × invaders   pcs <- stats::prcomp(X, center = TRUE, scale. = TRUE)$x[, 1:3, drop = FALSE]    # choose k via silhouette (2..8); fall back to k=4 if package missing   choose_k <- function(Z) {     if (requireNamespace(\"factoextra\", quietly = TRUE)) {       sil <- sapply(2:8, function(k) {         cl <- stats::kmeans(Z, centers = k, nstart = 50)$cluster         mean(cluster::silhouette(cl, dist(Z))[, 3])       })       which.max(sil) + 1     } else {       4     }   }   k <- choose_k(pcs)   site_groups <- stats::kmeans(pcs, centers = k, nstart = 50)$cluster    # Order clusters by *mean site fitness* so labels match risk gradient   tmp <- data.frame(     site_id = colnames(lambda_mat_noNA),     cluster = site_groups   ) |>     dplyr::left_join(site_sum[, c(\"site_id\", \"mean_l\")], by = \"site_id\") |>     dplyr::group_by(cluster) |>     dplyr::summarise(mu = mean(mean_l, na.rm = TRUE), .groups = \"drop\") |>     dplyr::arrange(dplyr::desc(mu))    site_labels <- c(\"very-high\", \"high\", \"medium\", \"low\", \"very-low\")[seq_len(nrow(tmp))]   remap <- setNames(site_labels, tmp$cluster)    site_sum <- site_sum %>%     dplyr::mutate(       site_cluster = factor(remap[as.character(site_groups[match(site_id, colnames(lambda_mat_noNA))])],         levels = site_labels       ),       site_category = site_cluster     ) }  # -------------------------------------------- # C) Spatially constrained clustering (ClustGeo) # -------------------------------------------- if (site_grouping_method == \"clustgeo\") {   if (!requireNamespace(\"ClustGeo\", quietly = TRUE)) {     stop(\"ClustGeo not installed. Install it or choose another method.\")   }   X <- scale(t(lambda_mat_noNA)) # sites × invaders   D1 <- dist(X) # λ-profile distance   D0 <- dist(as.matrix(site_coords)) # geographic distance    # alpha controls trade-off (0 = spatial only, 1 = λ only)   alpha <- 0.3   tree <- ClustGeo::hclustgeo(D0, D1, alpha = alpha)    # choose k via silhouette on D1 for guidance; fallback k=5   choose_k_hc <- function(tree, D) {     if (requireNamespace(\"cluster\", quietly = TRUE)) {       ks <- 2:8       sil <- sapply(ks, function(k) {         cl <- cutree(tree, k = k)         mean(cluster::silhouette(cl, D)[, 3])       })       ks[which.max(sil)]     } else {       5     }   }   k <- choose_k_hc(tree, D1)   site_groups <- cutree(tree, k = k)    tmp <- data.frame(     site_id = colnames(lambda_mat_noNA),     cluster = site_groups   ) |>     dplyr::left_join(site_sum[, c(\"site_id\", \"mean_l\")], by = \"site_id\") |>     dplyr::group_by(cluster) |>     dplyr::summarise(mu = mean(mean_l, na.rm = TRUE), .groups = \"drop\") |>     dplyr::arrange(dplyr::desc(mu))    site_labels <- c(\"very-high\", \"high\", \"medium\", \"low\", \"very-low\")[seq_len(nrow(tmp))]   remap <- setNames(site_labels, tmp$cluster)    site_sum <- site_sum %>%     dplyr::mutate(       site_cluster = factor(remap[as.character(site_groups[match(site_id, colnames(lambda_mat_noNA))])],         levels = site_labels       ),       site_category = site_cluster     ) }  # ------------------------------------------- # D) Ward HC with k via silhouette (no PCA) # ------------------------------------------- if (site_grouping_method == \"hc_sil\") {   X <- scale(t(lambda_mat_noNA))   hc <- stats::hclust(dist(X), method = \"ward.D2\")    choose_k_hc <- function(hc, X) {     if (requireNamespace(\"cluster\", quietly = TRUE)) {       ks <- 2:8       sil <- sapply(ks, function(k) {         cl <- cutree(hc, k = k)         mean(cluster::silhouette(cl, dist(X))[, 3])       })       ks[which.max(sil)]     } else {       4     }   }   k <- choose_k_hc(hc, X)   site_groups <- cutree(hc, k = k)    tmp <- data.frame(     site_id = colnames(lambda_mat_noNA),     cluster = site_groups   ) |>     dplyr::left_join(site_sum[, c(\"site_id\", \"mean_l\")], by = \"site_id\") |>     dplyr::group_by(cluster) |>     dplyr::summarise(mu = mean(mean_l, na.rm = TRUE), .groups = \"drop\") |>     dplyr::arrange(dplyr::desc(mu))    site_labels <- c(\"very-high\", \"high\", \"medium\", \"low\", \"very-low\")[seq_len(nrow(tmp))]   remap <- setNames(site_labels, tmp$cluster)    site_sum <- site_sum %>%     dplyr::mutate(       site_cluster = factor(remap[as.character(site_groups[match(site_id, colnames(lambda_mat_noNA))])],         levels = site_labels       ),       site_category = site_cluster     ) }  # --------------------------------------- # 3) Sanity checks (optional diagnostics) # --------------------------------------- # Are columns pre-sorted by longitude? # plot(match(colnames(lambda_mat_noNA), site_sum$site_id), #      order(site_sum$x)[match(colnames(lambda_mat_noNA), site_sum$site_id)], #      main = \"Col order vs. longitude order\")  # Shuffle columns to confirm clustering isn’t an artifact # set.seed(1); shuf = sample(ncol(lambda_mat_noNA)) # hc_shuf = hclust(dist(t(lambda_mat_noNA[, shuf])))  # ----------------------------- # 4) Map the site categories # ----------------------------- ggplot(site_sum, aes(x = x, y = y, fill = site_category)) +   geom_tile(color = NA) +   geom_sf(data = rsa, inherit.aes = FALSE, fill = NA, color = \"black\", size = 0.5) +   scale_fill_brewer(palette = \"RdYlBu\", direction = 1, name = \"Site invasibility\") +   coord_sf() +   labs(     title = paste0(       \"Spatial Invasion Risk (\",       switch(site_grouping_method,         quantile   = \"Quantile Bins of Mean \\u03BB\",         pca_kmeans = \"PCA + k-means\",         clustgeo   = \"Spatially Constrained ClustGeo\",         hc_sil     = \"Ward HC + Silhouette\"       ),       \")\"     ),     x = \"Longitude\", y = \"Latitude\"   ) +   theme_minimal(base_size = 12) +   theme(panel.grid = element_blank())"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_13-synthesising-invasion-fitness-insights","dir":"","previous_headings":"","what":"13. Synthesising Invasion Fitness Insights","title":"invasimap","text":"section distills spatial, clustering, trait-based analyses targeted summaries invasion risk patterns. outputs derived invasion fitness matrix λis\\lambda_{} computed compute_invasion_fitness(), ii indexes invaders ss indexes sites.","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_131-distribution-of-invasion-fitness-values","dir":"","previous_headings":"13. Synthesising Invasion Fitness Insights","what":"13.1 Distribution of Invasion Fitness Values","title":"invasimap","text":"histogram λis\\lambda_{} values provides system-wide view community openness invasion: Right-skewed distributions → prevalence favourable establishment conditions. Left-skewed distributions → dominance exclusionary environments. complements site- invader-specific patterns Section 12.","code":"# Plot the distribution of invasion fitness values (lambda) across all invader-site combinations, # using a histogram colored by lambda value for visual emphasis on fitness extremes ggplot(lambda_df, aes(x = lambda, fill = ..x..)) +   geom_histogram(bins = 40, color = \"grey30\") +   scale_fill_viridis_c(option = \"magma\", guide = \"none\") +   labs(     title = \"Distribution of Invasion Fitness Values (All Invader × Site)\",     x = expression(\"Invasion Fitness\" ~ lambda[i * k]),     y = \"Frequency\"   ) +   theme_minimal(base_size = 12)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_132-top-and-bottom-invaders-and-sites","dir":"","previous_headings":"13. Synthesising Invasion Fitness Insights","what":"13.2 Top and Bottom Invaders and Sites","title":"invasimap","text":"rapid prioritisation, rank invaders sites mean λis\\lambda_{}: Top-ranked invaders — consistently high predicted establishment success across sites. Top-ranked sites — consistently permissive wide range invaders. Bottom-ranked invaders/sites — consistently low λis\\lambda_{}, indicating strong biotic abiotic resistance. rankings direct, interpretable summaries invasion fitness landscape.","code":"#> ==== Top 3 Invaders by Mean Invasion Fitness ==== #> 1. inv3: 5.703 #> 2. inv4: 5.611 #> 3. inv9: 5.14 #> ==== Bottom 3 Invaders by Mean Invasion Fitness ==== #> 1. inv2: 2.816 #> 2. inv10: 2.3 #> 3. inv7: 2.289 #> ==== Top 3 Sites by Mean Invasion Fitness ==== #> 1. 558: 8.559 #> 2. 823: 8.338 #> 3. 1026: 8.173 #> ==== Bottom 3 Sites by Mean Invasion Fitness ==== #> 1. 729: 1.046 #> 2. 614: 0.952 #> 3. 802: 0.927"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_133-functional-correlates-of-invasion-success","dir":"","previous_headings":"13. Synthesising Invasion Fitness Insights","what":"13.3 Functional Correlates of Invasion Success","title":"invasimap","text":"explore trait–fitness relationships, join λis\\lambda_{} summaries invader trait data: Continuous traits — correlation coefficients mean λis\\lambda_{} identify traits positively negatively associated invasion success. Categorical traits — mean λis\\lambda_{} per trait level identifies functional syndromes linked high low establishment. supports hypothesis generation mechanistic drivers invasion potential, complementing purely spatial compositional analyses Section 12.","code":"#> ==== Top 3 Continuous Traits by Correlation with Mean Invasion Fitness ==== #> 1. trait_cont10: 0.403 #> 2. trait_cont6: 0.321 #> 3. trait_cont5: 0.302 #>  #> ==== Bottom 3 Continuous Traits by Correlation with Mean Invasion Fitness ==== #> 1. trait_cont2: -0.278 #> 2. trait_cont9: -0.459 #> 3. trait_cont1: -0.505 #> ==== Categorical Traits: Top Value per Trait by Mean Invasion Fitness ==== #> trait_cat11: grassland (4.53) #> trait_cat12: nocturnal (4.01) #> trait_cat13: bivoltine (4.25) #> trait_cat14: nectarivore (4.56) #> trait_cat15: migratory (4.36)"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_134-faceted-maps-for-key-invaders","dir":"","previous_headings":"13. Synthesising Invasion Fitness Insights","what":"13.4 Faceted Maps for Key Invaders","title":"invasimap","text":"map λis\\lambda_{} top 3 bottom 3 invaders Section 13.2: Top invaders — spatially explicit “hotspots” establishment potential. Bottom invaders — regions traits niches mismatched community environment. maps link functional traits, site conditions, predicted invasion risk interpretable, management-relevant format.  Note: * Sections 12–13 together move raw λis\\lambda_{} values → clustered patterns → functional correlates → site- invader-specific rankings. * progression enables scaling broad ecological syndromes actionable risk profiles specific species sites.  ","code":"# Identify the top 3 and bottom 3 invaders by mean fitness key_invaders <- c(top3_inv$invader, bottom3_inv$invader) # select 3 best/worst  # Filter df amd ensure facet order matches ranking (top first, then bottom) lambda_key <- lambda_df %>%   filter(invader %in% key_invaders) %>%   mutate(invader = factor(invader, levels = key_invaders)) # enforce desired order  # Faceted map # Spatial invasion fitness for each of the top/bottom invaders, enabling direct visual comparison ggplot(lambda_key, aes(x = x, y = y, fill = lambda)) +   geom_tile() +   geom_sf(data = rsa, inherit.aes = FALSE, fill = NA, color = \"black\", size = 0.5) +   facet_wrap(~invader, ncol = 3) +   scale_fill_viridis_c(option = \"viridis\", direction = -1) +   labs(     title = \"Spatial Summaries of Invasion Fitness\\nfor Top-3 and Bottom-3 Invaders\",     x = \"Longitude\", y = \"Latitude\"   ) +   theme_minimal(base_size = 12) +   theme(panel.grid = element_blank())"},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_14-glossary-table-symbols-r-objects-meaning-units-source","dir":"","previous_headings":"","what":"14. Glossary table (symbols, R objects, meaning, units, source)","title":"invasimap","text":"Notes (index orientation ’ll care code): a_ij[, j] = invader × resident K_env[s, j] = sites × residents Nstar[j, s] = residents × sites prediction_matrix[s, ] = sites × species; fitness$r_mat use invader × site ordering: r_mat[, s].","code":""},{"path":"https://macsands.github.io/invasimap/index.html","id":"id_15-references","dir":"","previous_headings":"","what":"15. References","title":"invasimap","text":"Hui C, Richardson DM (2017). Invasion Dynamics. Oxford University Press. Hui C, Richardson DM, Landi P. et al. (2016). Defining invasiveness invasibility ecological networks. Biological Invasions. Hui C et al. (2021). Trait-mediated ecological networks: mechanisms consequences invasion. Trends Ecology & Evolution. Hui C et al. (2023). [Title relevant work, update needed.] RMarkdown document implements reproducible, extensible workflow trait-based invasion ecology, integrating best practices data wrangling, statistical modeling, scientific visualization. Please cite original data framework sources appropriate.","code":""},{"path":"https://macsands.github.io/invasimap/reference/assemble_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble site- and species-specific competition/impact matrices — assemble_matrices","title":"Assemble site- and species-specific competition/impact matrices — assemble_matrices","text":"Builds 3D array per-site interaction terms combining: (1) invader resident abundances, (2) trait-based competition coefficients \\(a_{ij}\\), (3) environmental matching site residents. result tensor I_raw[invader, resident, site] suitable summarising total competitive pressure invader site.","code":""},{"path":"https://macsands.github.io/invasimap/reference/assemble_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble site- and species-specific competition/impact matrices — assemble_matrices","text":"","code":"assemble_matrices(   a_ij,   Nstar,   invader_pred_wide = NULL,   predictions = NULL,   env_dist,   sigma_e = NULL,   K_env = NULL )"},{"path":"https://macsands.github.io/invasimap/reference/assemble_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble site- and species-specific competition/impact matrices — assemble_matrices","text":"a_ij numeric matrix (invaders × residents). Trait-based competition coefficients (e.g., compute_competition()). Row names = invader IDs; column names = resident IDs. Nstar numeric matrix (residents × sites). Resident abundances site (e.g., compute_interaction_strength()). Row names = resident IDs; column names = site IDs. invader_pred_wide numeric matrix (sites × invaders) NULL. Site × invader abundances response scale. NULL, supply predictions instead. predictions data.frame NULL. Long table columns species, site_id, pred. Used invader_pred_wide NULL. env_dist numeric matrix (sites × residents). Site-resident environmental distance (e.g., compute_environment_kernel()). Row names = site IDs; column names = resident IDs. sigma_e numeric NULL. Bandwidth Gaussian environmental kernel; NULL, compute kernel upstream (e.g., compute_environment_kernel(..., kernel = \"gaussian\")) pass via K_env. K_env numeric matrix (sites × residents) NULL. Optional precomputed environmental kernel (similarity) residents site. supplied, env_dist sigma_e ignored.","code":""},{"path":"https://macsands.github.io/invasimap/reference/assemble_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble site- and species-specific competition/impact matrices — assemble_matrices","text":"list : I_raw: 3D array (invaders × residents × sites) per-pair impact terms. pressure_inv_site: matrix (invaders × sites) total pressure invader site (sum residents). meta: list matched IDs dimensions.","code":""},{"path":"https://macsands.github.io/invasimap/reference/assemble_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble site- and species-specific competition/impact matrices — assemble_matrices","text":"site \\(s\\), invader \\(\\), resident \\(j\\): $$I_{j s} = r_{s}\\, r_{j s}\\, a_{j}\\, K^{(env)}_{j s},$$ \\(r_{s}\\) \\(r_{j s}\\) predicted (expected) abundances, \\(a_{j} = \\exp\\!\\big(-d_{j}^2/(2\\,\\sigma_t^2)\\big)\\) trait-based competition coefficient, \\(K^{(env)}_{j s}\\) environmental matching kernel resident \\(j\\) site \\(s\\).","code":""},{"path":"https://macsands.github.io/invasimap/reference/assemble_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble site- and species-specific competition/impact matrices — assemble_matrices","text":"","code":"# Minimal, self-contained toy example set.seed(1) inv <- paste0(\"inv\", 1:2) res <- paste0(\"sp\", 1:3) sites <- paste0(\"s\", 1:4)  # invader × resident Gaussian kernel (a_ij) a_ij <- matrix(runif(length(inv) * length(res), 0.1, 0.9),   nrow = length(inv), dimnames = list(inv, res) )  # residents × sites abundances (Nstar) Nstar <- matrix(abs(rnorm(length(res) * length(sites), 5, 2)),   nrow = length(res), dimnames = list(res, sites) )  # site × resident environmental kernel (K_env) K_env <- matrix(runif(length(sites) * length(res), 0.3, 1),   nrow = length(sites), dimnames = list(sites, res) )  # long predictions data.frame (pred) with r_is predictions <- expand.grid(site_id = sites, species = inv) predictions$pred <- rlnorm(nrow(predictions), 0, 0.4)  am <- assemble_matrices(   a_ij = a_ij, Nstar = Nstar,   K_env = K_env, predictions = predictions ) str(am) #> List of 3 #>  $ I_raw            : num [1:2, 1:3, 1:4] 2.23 2.03 3.798 4.021 0.968 ... #>   ..- attr(*, \"dimnames\")=List of 3 #>   .. ..$ : chr [1:2] \"inv1\" \"inv2\" #>   .. ..$ : chr [1:3] \"sp1\" \"sp2\" \"sp3\" #>   .. ..$ : chr [1:4] \"s1\" \"s2\" \"s3\" \"s4\" #>  $ pressure_inv_site: num [1:2, 1:4] 7 8.22 5.22 8.25 2.73 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"inv1\" \"inv2\" #>   .. ..$ : chr [1:4] \"s1\" \"s2\" \"s3\" \"s4\" #>  $ meta             :List of 6 #>   ..$ n_inv    : int 2 #>   ..$ n_res    : int 3 #>   ..$ n_sites  : int 4 #>   ..$ invaders : chr [1:2] \"inv1\" \"inv2\" #>   ..$ residents: chr [1:3] \"sp1\" \"sp2\" \"sp3\" #>   ..$ sites    : chr [1:4] \"s1\" \"s2\" \"s3\" \"s4\""},{"path":"https://macsands.github.io/invasimap/reference/build_glmm_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a trait-environment GLMM formula safely and flexibly — build_glmm_formula","title":"Build a trait-environment GLMM formula safely and flexibly — build_glmm_formula","text":"Constructs model formula trait-environment analyses single step. function () auto-detects trait environment columns long-format table, (ii) assembles fixed effects traits environment variables, (iii) optionally includes pairwise \\(trait \\times environment\\) interactions, (iv) appends user-specified random-effects terms. returned object standard formula suitable glmmTMB, lme4, etc.","code":""},{"path":"https://macsands.github.io/invasimap/reference/build_glmm_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a trait-environment GLMM formula safely and flexibly — build_glmm_formula","text":"","code":"build_glmm_formula(   data,   response = \"count\",   species_col = \"species\",   site_col = \"site_id\",   trait_cols = NULL,   env_cols = NULL,   env_exclude = c(\"site_id\", \"x\", \"y\", \"count\", \"species\"),   include_interactions = TRUE,   random_effects = c(\"(1 | species)\", \"(1 | site_id)\") )"},{"path":"https://macsands.github.io/invasimap/reference/build_glmm_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a trait-environment GLMM formula safely and flexibly — build_glmm_formula","text":"data data.frame. Long-format observations (e.g., species--site), including response, species ID, site ID, trait columns, environment columns. response character (default \"count\"). Name response variable (e.g., count/abundance). species_col character (default \"species\"). Column name identifying species. site_col character (default \"site_id\"). Column name identifying sites. trait_cols NULL character vector. NULL (default), traits auto-detected using name prefixes ^trait_, ^t_, ^trt_. found, falls back “everything excluded” (see env_exclude). Pass explicit names full control. env_cols NULL character vector. NULL (default), environment variables auto-detected using name prefixes ^env_, ^e_, ^clim_, ^soil_. found, falls back “everything traits excluded”. env_exclude character vector. Columns exclude environment auto-detection. Defaults c(\"site_id\",\"x\",\"y\",\"count\",\"species\"). Adjust schema. include_interactions logical (default TRUE). TRUE, adds single block term (traits):(envs) expands pairwise \\(trait \\times environment\\) interactions. random_effects character vector. Random-effect terms append RHS (e.g., \"(1 | species)\"). Use character(0) omit random effects. Default adds random intercepts species site: c(\"(1 | species)\", \"(1 | site_id)\").","code":""},{"path":"https://macsands.github.io/invasimap/reference/build_glmm_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a trait-environment GLMM formula safely and flexibly — build_glmm_formula","text":"formula fixed effects (traits + envs + interactions) requested random effects, e.g.:","code":"count ~ trait_cont1 + ... + trait_cat + env1 + ... + envK +           (trait_cont1 + ... + trait_cat):(env1 + ... + envK) +           (1 | species) + (1 | site_id)"},{"path":"https://macsands.github.io/invasimap/reference/build_glmm_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a trait-environment GLMM formula safely and flexibly — build_glmm_formula","text":"Auto-detection: Traits: first tries prefixes ^trait_, ^t_, ^trt_. none match, uses columns env_exclude, response, species_col, site_col. Environment: first tries prefixes ^env_, ^e_, ^clim_, ^soil_. none match, uses remaining non-excluded columns already assigned traits. Interactions: include_interactions = TRUE, single block term (t1 + t2 + ...):(e1 + e2 + ...) inserted; model-fitting packages expand pairwise interactions. Disable FALSE design large prefer targeted interactions. Random effects: Supplied verbatim (e.g., random intercepts/slopes). example, c(\"(1 | species)\", \"(1 | site_id)\") c(\"(1 + key_trait | species)\").","code":""},{"path":[]},{"path":"https://macsands.github.io/invasimap/reference/build_glmm_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a trait-environment GLMM formula safely and flexibly — build_glmm_formula","text":"","code":"# Minimal reproducible toy example ----------------------------------------- set.seed(1) n <- 100 longDF <- data.frame(   site_id = factor(sample(paste0(\"s\", 1:10), n, TRUE)),   species = factor(sample(paste0(\"sp\", 1:15), n, TRUE)),   x = runif(n), y = runif(n),   count = rpois(n, lambda = 3),   # traits   trait_cont1 = rnorm(n),   trait_cont2 = rnorm(n),   trait_cat = factor(sample(letters[1:3], n, TRUE)),   # environments   env1 = scale(rnorm(n))[, 1],   env2 = scale(runif(n))[, 1] )  # Build a full formula with all trait × environment interactions and default REs fml <- build_glmm_formula(longDF) fml #> count ~ trait_cont1 + trait_cont2 + trait_cat + env1 + env2 +  #>     (trait_cont1 + trait_cont2 + trait_cat):(env1 + env2) + (1 |  #>     species) + (1 | site_id) #> <environment: 0x55fc8ed217e0>  # Example fit (uncomment if glmmTMB is available) # mod = glmmTMB::glmmTMB(fml, data = longDF, family = glmmTMB::tweedie(link = \"log\")) # summary(mod)  # Targeted columns & no interactions fml2 <- build_glmm_formula(   data = longDF,   trait_cols = c(\"trait_cont1\", \"trait_cont2\", \"trait_cat\"),   env_cols = c(\"env1\", \"env2\"),   include_interactions = FALSE,   random_effects = character(0) ) fml2 #> count ~ trait_cont1 + trait_cont2 + trait_cat + env1 + env2 #> <environment: 0x55fc8ee22a50>"},{"path":"https://macsands.github.io/invasimap/reference/compute_competition_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute trait-based competition coefficients from a distance matrix — compute_competition_kernel","title":"Compute trait-based competition coefficients from a distance matrix — compute_competition_kernel","text":"Given species--species trait distance matrix (e.g., Gower), function extracts invader × resident block distances \\(d_{ij}\\) transforms competition coefficient matrix \\(a_{ij}\\) using Gaussian kernel: $$a_{ij} = \\exp\\!\\left\\{ - \\frac{d_{ij}^2}{2\\,\\sigma_t^2} \\right\\}.$$ kernel bandwidth \\(\\sigma_t\\) controls quickly competition decays trait difference. default estimated resident-resident distances, decay reflects realised dispersion resident pool.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_competition_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute trait-based competition coefficients from a distance matrix — compute_competition_kernel","text":"","code":"compute_competition_kernel(   g_all,   residents,   invaders = NULL,   sigma_t = NULL,   sigma_method = c(\"sd\", \"median\", \"iqr\"),   eps = 1e-08 )"},{"path":"https://macsands.github.io/invasimap/reference/compute_competition_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute trait-based competition coefficients from a distance matrix — compute_competition_kernel","text":"g_all matrix. Symmetric species × species trait distance matrix row/column names species IDs (e.g., Gower). residents character. Vector resident species IDs (must rownames(g_all)). invaders NULL character. Vector invader species IDs. NULL, defaults species g_all residents. sigma_t NULL numeric. Kernel bandwidth. NULL, estimated upper triangle resident-resident distances using sigma_method. sigma_method character. estimate \\(\\sigma_t\\) missing; one c(\"sd\",\"median\",\"iqr\"). Default \"sd\". eps numeric. Tiny positive value used estimated \\(\\sigma_t\\) zero; default 1e-8.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_competition_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute trait-based competition coefficients from a distance matrix — compute_competition_kernel","text":"list : d_ij (n_inv × n_res): invader-resident distance block (g_all). a_ij (n_inv × n_res): competition coefficients (Gaussian kernel distances \\(d_{ij}\\)). sigma_t: bandwidth used. meta: list estimation method counts invaders/residents.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_competition_kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute trait-based competition coefficients from a distance matrix — compute_competition_kernel","text":"Use distance matrix g_all (similarity). Gower, distances typically 0, 1. Estimating \\(\\sigma_t\\) residents makes kernel scale data-driven comparable across analyses. prefer fixed ecological scale, pass sigma_t explicitly (e.g., trait threshold interest).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_competition_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute trait-based competition coefficients from a distance matrix — compute_competition_kernel","text":"","code":"# --- Simulate a toy distance matrix (no external packages) --- set.seed(42) spp <- paste0(\"sp_\", 1:8) traits <- data.frame(   t1 = rnorm(length(spp)),   t2 = runif(length(spp)) )  # Euclidean distances on simulated traits, scaled to [0, 1] g_all <- as.matrix(stats::dist(traits, method = \"euclidean\")) g_all <- g_all / max(g_all)                 # scale to [0,1] rownames(g_all) <- colnames(g_all) <- spp  # Define residents and invaders residents <- spp[1:5] invaders  <- spp[6:8]  # Compute competition kernel (sigma_t estimated from resident–resident distances) comp <- compute_competition_kernel(   g_all     = g_all,   residents = residents,   invaders  = invaders,   sigma_method = \"sd\" )  # Inspect results str(comp$a_ij)           # (invaders × residents) competition coefficients #>  num [1:3, 1:5] 0.006808 0.966233 0.024361 0.694695 0.000156 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:3] \"sp_6\" \"sp_7\" \"sp_8\" #>   ..$ : chr [1:5] \"sp_1\" \"sp_2\" \"sp_3\" \"sp_4\" ... comp$sigma_t             # bandwidth used #> [1] 0.2388547  # Same call without providing invaders (uses complement of residents) comp2 <- compute_competition_kernel(g_all, residents = residents)"},{"path":"https://macsands.github.io/invasimap/reference/compute_environment_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Environmental optima and site-species environmental distance (with optional kernel) — compute_environment_kernel","title":"Environmental optima and site-species environmental distance (with optional kernel) — compute_environment_kernel","text":"Estimates species’ environmental optimum abundance-weighted mean site-level environmental covariates, computes distance (default: Gower) every site every species optimum. Optionally returns environmental kernel (similarity) transforming distances (e.g., Gaussian).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_environment_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environmental optima and site-species environmental distance (with optional kernel) — compute_environment_kernel","text":"","code":"compute_environment_kernel(   site_env,   abundance_wide = NULL,   predictions = NULL,   site_col = \"site_id\",   env_cols = NULL,   coord_cols = c(\"x\", \"y\"),   method = c(\"gower\", \"euclidean\", \"manhattan\"),   gower_stand = TRUE,   kernel = c(\"distance\", \"similarity\", \"gaussian\"),   sigma_e = NULL,   sigma_method = c(\"sd\", \"median\", \"iqr\"),   scale_01 = TRUE )"},{"path":"https://macsands.github.io/invasimap/reference/compute_environment_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environmental optima and site-species environmental distance (with optional kernel) — compute_environment_kernel","text":"site_env data.frame. One row per site; must include site_col environmental variables (numeric/factor/ordered). Coordinate columns can present. abundance_wide matrix/data.frame NULL. Sites × species numeric abundance/weight table (rows = sites, columns = species). NULL, provide predictions instead. predictions data.frame NULL. Long table columns species, site_id, pred construct abundance_wide internally. site_col character. Site identifier column site_env (predictions). Default \"site_id\". env_cols NULL character. Environmental columns site_env. NULL, auto-detect non-site_col non-coordinate columns. coord_cols character. Columns exclude env detection (e.g., coords). Default c(\"x\",\"y\"). method character. Distance metric site-optimum comparison: \"gower\" (default), \"euclidean\", \"manhattan\". gower_stand logical. Standardise numeric vars inside Gower (default TRUE). kernel character. One \"distance\" (transform), \"similarity\" (1 - scaled distance), \"gaussian\" (Gaussian kernel). Default \"distance\". sigma_e numeric NULL. Bandwidth Gaussian kernel. NULL, estimated non-zero env_dist using sigma_method. sigma_method character. estimate sigma_e missing: \"sd\" (default), \"median\", \"iqr\". scale_01 logical. Min-max scale distances 0,1 \"similarity\"; non-Gower metrics , applied automatically needed.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_environment_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environmental optima and site-species environmental distance (with optional kernel) — compute_environment_kernel","text":"list : env_opt: species × env matrix abundance-weighted optima. env_dist: sites × species distance matrix (site ↔ species-optimum). K_env: sites × species kernel (kernel != \"distance\"). sigma_e: bandwidth used (Gaussian). meta: list settings detected columns.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_environment_kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Environmental optima and site-species environmental distance (with optional kernel) — compute_environment_kernel","text":"Let \\(E_s\\) vector environmental covariates site \\(s\\), \\(w_{s,j}\\) abundance (weight) species \\(j\\) site \\(s\\). environmental optimum species \\(j\\) $$ \\mu_j \\;=\\; \\frac{\\sum_s w_{s,j} \\, E_s}{\\sum_s w_{s,j}}. $$ environmental distance site \\(s\\) species \\(j\\) \\(d_{s j} = \\mathrm{Gower}(E_s, \\mu_j)\\) (another supported metric). optional kernel converts distances similarity, e.g., Gaussian \\(K_{sj} = \\exp\\{-d_{sj}^2/(2 \\sigma_e^2)\\}\\). bandwidth \\(\\sigma_e\\) controls quickly suitability decays mismatch; default estimate \\(\\sigma_e\\) distribution \\(d_{sj}\\).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_environment_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Environmental optima and site-species environmental distance (with optional kernel) — compute_environment_kernel","text":"","code":"# --- Simulate sites, environments, and species weights (no extra packages) --- set.seed(123)  # Sites and species n_sites <- 6 n_spp   <- 4 sites   <- paste0(\"s\", seq_len(n_sites)) spp     <- paste0(\"sp\", seq_len(n_spp))  # Site-level environment table (include optional coord columns) site_env <- data.frame(   site_id = sites,   x       = rnorm(n_sites),   y       = rnorm(n_sites),   temp    = runif(n_sites, 5, 25),     # numeric env var   precip  = runif(n_sites, 400, 900),  # numeric env var   check.names = FALSE )  # Sites × species abundance/weights (any non-negative numbers) abundance_wide <- matrix(   rexp(n_sites * n_spp, rate = 1),   nrow = n_sites, ncol = n_spp,   dimnames = list(sites, spp) )  # Compute environmental optima and site–species distances ek <- compute_environment_kernel(   site_env       = site_env,   abundance_wide = abundance_wide,   # avoids needing tidyr   site_col       = \"site_id\",   method         = \"euclidean\",      # uses stats::dist (no extra deps)   kernel         = \"gaussian\",       # also returns K_env   sigma_method   = \"sd\" )  # Inspect results str(ek$env_opt)       # species × env optima #>  num [1:4, 1:2] 14.7 14.3 14.9 12.5 709.4 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:4] \"sp1\" \"sp2\" \"sp3\" \"sp4\" #>   ..$ : chr [1:2] \"temp\" \"precip\" dim(ek$env_dist)      # sites × species distance matrix #> [1] 6 4 if (!is.null(ek$K_env)) range(ek$K_env, na.rm = TRUE) #> [1] 0.004038454 0.997522436  # (Optional) If you prefer Gower distances, set method = \"gower\". # This uses cluster::daisy internally and may require the 'cluster' package: # ek_gower <- compute_environment_kernel( #   site_env       = site_env, #   abundance_wide = abundance_wide, #   site_col       = \"site_id\", #   method         = \"gower\", #   kernel         = \"similarity\" # )"},{"path":"https://macsands.github.io/invasimap/reference/compute_interaction_strength.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute trait-based interaction strengths and resident abundance matrix — compute_interaction_strength","title":"Compute trait-based interaction strengths and resident abundance matrix — compute_interaction_strength","text":"Computes trait-based pairwise interaction matrix species (residents + invaders) using Gower distance (default) another dissimilarity metric, options : Kernelisation (distance, similarity, gaussian) Scaling/standardisation Sparsification (e.g., k-nearest neighbour graph) Also returns Nstar, site × resident abundance matrix predicted values.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_interaction_strength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute trait-based interaction strengths and resident abundance matrix — compute_interaction_strength","text":"","code":"compute_interaction_strength(   traits,   predDF,   method = \"gower\",   kernel = c(\"distance\", \"similarity\", \"gaussian\"),   sigma = NULL,   standardise = FALSE,   sparsify_k = NULL )"},{"path":"https://macsands.github.io/invasimap/reference/compute_interaction_strength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute trait-based interaction strengths and resident abundance matrix — compute_interaction_strength","text":"traits data.frame. Species traits, first column = species name, remaining = traits. predDF data.frame. Long table columns site_id, species, predicted abundance. method character. Distance metric daisy (default \"gower\"). kernel character. One \"distance\", \"similarity\", \"gaussian\". sigma numeric. Gaussian kernel bandwidth; NULL, set median non-zero distance. standardise logical. TRUE, scale distances 0,1 kernelisation. sparsify_k integer. non-NULL, retain k-nearest neighbours per species (symmetrised).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_interaction_strength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute trait-based interaction strengths and resident abundance matrix — compute_interaction_strength","text":"list : g_all: processed interaction matrix (distance similarity). raw_distance: unscaled Gower (chosen) distance matrix. Nstar: site × resident abundance matrix. sigma: bandwidth used (Gaussian kernel).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_interaction_strength.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute trait-based interaction strengths and resident abundance matrix — compute_interaction_strength","text":"trait-based interaction strength matrix (g_all) used community assembly invasion models quantify potential biotic effects species. recommend Gower distance mixed traits, scale-free bounded 0,1. resident abundance matrix (Nstar) summarises equilibrium expected abundances resident species site, based predictions fitted abundance model. Kernelisation options: \"distance\": return dissimilarities directly (default transparent interpretation). \"similarity\": convert similarity 0,1 1 - scaled_distance. \"gaussian\": Gaussian kernel \\(K = exp(-D^2 / (2\\sigma^2))\\), automatic \\(\\sigma\\) median non-zero distance supplied.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_invasion_fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute invasion fitness from competition/impact tensors and growth predictions — compute_invasion_fitness","title":"Compute invasion fitness from competition/impact tensors and growth predictions — compute_invasion_fitness","text":"Aggregates site- species-specific impact tensor quantify total competitive penalty experienced invader site, computes several invasion-fitness formulations subtracting competition penalties predicted growth.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_invasion_fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute invasion fitness from competition/impact tensors and growth predictions — compute_invasion_fitness","text":"","code":"compute_invasion_fitness(   I_raw = NULL,   pressure_inv_site = NULL,   r_mat = NULL,   predictions = NULL,   a_ij = NULL,   Nstar = NULL,   logistic_on = c(\"raw\", \"rel\"),   k = 1,   x0 = NULL,   prefer = c(\"logis\", \"rel\", \"raw\", \"scaled\") )"},{"path":"https://macsands.github.io/invasimap/reference/compute_invasion_fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute invasion fitness from competition/impact tensors and growth predictions — compute_invasion_fitness","text":"I_raw 3D numeric array [invader, resident, site] assemble_matrices(), NULL pass pressure_inv_site instead. pressure_inv_site numeric matrix [invader, site] (sum residents), optional alternative I_raw. r_mat numeric matrix [invader, site] invader growth response scale, NULL pass predictions. predictions data.frame NULL. Long table columns species, site_id, pred. Used build r_mat r_mat NULL. a_ij numeric matrix [invader, resident] competition coefficients; required lambda_rel lambda_logis logistic_on = \"rel\". Nstar numeric matrix [resident, site] resident abundances; required lambda_rel lambda_logis logistic_on = \"rel\". logistic_on character. Use \"raw\" (default) apply logistic cap C_raw; use \"rel\" apply %*% N_rel. k numeric. Logistic steepness parameter (default 1). x0 numeric NULL. Logistic midpoint. NULL, set median(C_target, na.rm = TRUE). prefer \"logis\"|\"rel\"|\"raw\"|\"scaled\". fitness return $lambda (default \"logis\").","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_invasion_fitness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute invasion fitness from competition/impact tensors and growth predictions — compute_invasion_fitness","text":"list components: C_raw [invader, site]: total penalty summed residents. r_mat [invader, site]: invader growth matrix. lambda_raw, lambda_scaled, lambda_rel, lambda_logis: fitness variants. lambda: selected fitness (per prefer). meta: data inputs, dimensions, chosen options.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_invasion_fitness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute invasion fitness from competition/impact tensors and growth predictions — compute_invasion_fitness","text":"Let \\(I_{j s}\\) per-pair impact site \\(s\\) (e.g., assemble_matrices()), invader \\(\\), resident \\(j\\). total competition penalty invader-site $$C_{s} = \\sum_{j} I_{j s}.$$ Given matrix invader growth predictions \\(r_{s}\\), compute: Raw: \\(\\lambda^{raw}_{s} = r_{s} - C_{s}\\). Scaled: \\(\\lambda^{scaled}_{s} = r_{s} - C_{s}/J\\) \\,(\\(J\\) number residents). Relative-abundance: \\(\\lambda^{rel}_{s} = r_{s} - (N^{rel})_{s}\\), \\(= [a_{j}]\\) \\(N^{rel}_{j s} = N_{j s} / \\sum_{j'} N_{j' s}\\). Logistic-capped: \\(\\lambda^{logis}_{s} = r_{s} - \\frac{1}{1 + \\exp\\{-k\\, (C^{*}_{s} - x_{0})\\}}\\), \\(C^{*}_{s}\\) taken either \\(C_{s}\\) (raw) \\((N^{rel})_{s}\\) (relative), selected via logistic_on = \"raw\" \"rel\".","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_invasion_fitness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute invasion fitness from competition/impact tensors and growth predictions — compute_invasion_fitness","text":"","code":"# --- Minimal, fully simulated example (base R only) ------------------------ set.seed(123)  # IDs invaders <- paste0(\"sp\", 1:3)   # 3 invaders residents <- paste0(\"r\", 1:4)   # 4 residents sites    <- paste0(\"s\", 1:5)    # 5 sites  # Competition coefficients a_ij (invader × resident), e.g. from a Gaussian of # synthetic distances. Values in (0,1]. n_i <- length(invaders); n_j <- length(residents); n_s <- length(sites) d_ij  <- matrix(runif(n_i * n_j), nrow = n_i,                 dimnames = list(invaders, residents)) sigma <- 0.4 a_ij  <- exp(-(d_ij^2) / (2 * sigma^2))  # Resident abundances per site Nstar (resident × site), positive numbers Nstar <- matrix(rexp(n_j * n_s, rate = 1), nrow = n_j,                 dimnames = list(residents, sites))  # Build a simple impact tensor I_raw [invader, resident, site]: # I_ijs = a_ij * Nstar[j, s] I_raw <- array(NA_real_, dim = c(n_i, n_j, n_s),                dimnames = list(invaders, residents, sites)) for (s in seq_along(sites)) {   I_raw[, , s] <- a_ij * rep(Nstar[, s], each = n_i) }  # Predicted growth on the response scale r_mat [invader, site] r_mat <- matrix(rexp(n_i * n_s, rate = 1), nrow = n_i,                 dimnames = list(invaders, sites))  # Compute invasion fitness (logistic cap applied to relative pressure A %*% N_rel) fit <- compute_invasion_fitness(   I_raw       = I_raw,   r_mat       = r_mat,   a_ij        = a_ij,   Nstar       = Nstar,   logistic_on = \"rel\",   k           = 1,   x0          = NULL,   prefer      = \"logis\" )  # Inspect the final fitness matrix [invader × site] dim(fit$lambda); range(fit$lambda, na.rm = TRUE) #> [1] 3 5 #> [1] -0.4682323  2.1860024  # Alternative variants: # fit_raw    <- compute_invasion_fitness(I_raw = I_raw, r_mat = r_mat, prefer = \"raw\") # fit_scaled <- compute_invasion_fitness(I_raw = I_raw, r_mat = r_mat, prefer = \"scaled\")"},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","title":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","text":"Computes Gower dissimilarity matrix mixed-type traits, performs hierarchical clustering, runs PCoA, visualizes density/centrality, summarizes functional dispersion metrics (FDis, FRic, Rao's Q).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","text":"","code":"compute_trait_dispersion(   trait_df,   species_col = 1,   k = 4,   pcoa_dims = 2,   abundance = NULL,   kde_n = 100,   viridis_option = \"D\",   show_density_plot = TRUE,   show_plots = FALSE,   seed = NULL )"},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","text":"trait_df data.frame. One row per species (unit); mixed types allowed. species_col integer character (default = 1). Column exclude distance. k integer (default = 4). Number clusters dendrogram. pcoa_dims integer (default = 2). PCoA axes retained (≥ 2). abundance numeric vector NULL. Optional species weights; normalized internally. kde_n integer (default = 100). KDE grid resolution density. viridis_option character (default = \"D\"). Palette option viridisLite::viridis. show_density_plot logical (default = TRUE). Also compute base filled.contour. show_plots logical (default = FALSE). TRUE, prints portrait patchwork ggplots. seed integer NULL. Optional RNG seed.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_dispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","text":"list components: distance_matrix (matrix), hc (hclust), pcoa (list cmdscale), scores (data.frame centrality), centroid (numeric), metrics_df (data.frame FDis/FRic/RaoQ), plots (list ggplots: $dend, $density_gg, $centrality_hist, $metrics_bar).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_dispersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","text":"FRic computed convex-hull volume/area PCoA space via geometry::convhulln. degenerate, returns NA warning. Rao's Q uses Euclidean distances reduced PCoA space: \\(0.5\\sum_{,j} p_i p_j d_{ij}\\).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_dispersion.html","id":"simulated-example","dir":"Reference","previous_headings":"","what":"Simulated example","title":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","text":"Use tdp_simulate_traits generate small, mixed-type trait table.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_dispersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trait Dispersion Pipeline: Gower → clustering → PCoA → density → metrics — compute_trait_dispersion","text":"","code":"# --- Built-in simulated example for reproducibility (mixed continuous + categorical traits) --- tdp_simulate_traits <- function(n = 30, seed = NULL) {   if (!is.null(seed)) set.seed(seed)   species <- paste0(\"sp_\", seq_len(n))   # continuous   t1 <- rnorm(n, 0, 1)   t2 <- runif(n, -1, 1)   # ordinal   t3 <- factor(sample(1:3, n, TRUE), ordered = TRUE)   # binary   t4 <- factor(sample(c(0, 1), n, TRUE))   # categorical   t5 <- factor(sample(LETTERS[1:4], n, TRUE))   traits <- data.frame(     species = species,     t_len = t1,     t_mass = t2,     t_rank = t3,     t_bin = t4,     t_cat = t5,     check.names = FALSE   )   abundance <- rexp(n, rate = 1)   list(traits = traits, abundance = abundance) }  # Generate simulated traits + abundance sim_data <- tdp_simulate_traits(n = 25, seed = 123)  # Run pipeline and show combined patchwork res <- compute_trait_dispersion(   trait_df = sim_data$traits,   species_col = \"species\",   abundance = sim_data$abundance,   k = 4,   pcoa_dims = 2,   show_density_plot = FALSE,   show_plots = TRUE ) #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the factoextra package. #>   Please report the issue at <https://github.com/kassambara/factoextra/issues>.   # Access metrics res$metrics_df #>   Metric     Value #> 1   FDis 0.3113964 #> 2   FRic 0.3613049 #> 3   RaoQ 0.1991308  # Access a specific plot res$plots$density_gg"},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Trait Similarity for Numeric and Categorical Variables — compute_trait_similarity","title":"Compute Trait Similarity for Numeric and Categorical Variables — compute_trait_similarity","text":"function calculates within-trait similarity percentage column data frame. Numeric traits use scaled mean pairwise similarity; categorical traits use proportion identical pairs.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Trait Similarity for Numeric and Categorical Variables — compute_trait_similarity","text":"","code":"compute_trait_similarity(df)"},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Trait Similarity for Numeric and Categorical Variables — compute_trait_similarity","text":"df data.frame tibble column trait vector (numeric factor/character).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Trait Similarity for Numeric and Categorical Variables — compute_trait_similarity","text":"tibble two columns: Trait original column name Similarity Percentage similarity (0-100) trait","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Trait Similarity for Numeric and Categorical Variables — compute_trait_similarity","text":"","code":"df <- data.frame(   height = c(10, 15, 15, 20),   color  = c(\"red\", \"blue\", \"red\", \"red\") ) compute_trait_similarity(df) #> # A tibble: 2 × 2 #>   Trait  Similarity #>   <chr>       <dbl> #> 1 height         50 #> 2 color          50"},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Trait Space: per-trait similarity + community dispersion — compute_trait_space","title":"Compute Trait Space: per-trait similarity + community dispersion — compute_trait_space","text":"unified workflow (1) computes within-trait similarity (numeric + categorical) (2) computes community-level dispersion trait space (Gower → clustering → PCoA → density → metrics).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Trait Space: per-trait similarity + community dispersion — compute_trait_space","text":"","code":"compute_trait_space(   trait_df,   species_col = 1,   do_similarity = TRUE,   similarity_cols = NULL,   do_dispersion = TRUE,   k = 4,   pcoa_dims = 2,   abundance = NULL,   kde_n = 100,   viridis_option = \"D\",   show_density_plot = TRUE,   show_plots = FALSE,   seed = NULL )"},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Trait Space: per-trait similarity + community dispersion — compute_trait_space","text":"trait_df data.frame. One row per species (unit); mixed types allowed. species_col integer character (default = 1). Column indicating species ID; excluded distances. do_similarity logical (default = TRUE). TRUE, compute per-trait similarity. similarity_cols NULL, character, integer. columns use similarity; default = columns except species_col. do_dispersion logical (default = TRUE). TRUE, run dispersion pipeline. k integer (default = 4). Number clusters dendrogram. pcoa_dims integer (default = 2). Number PCoA axes retained (≥ 2). abundance numeric vector NULL. Optional species weights; normalized internally. kde_n integer (default = 100). KDE grid resolution density. viridis_option character (default = \"D\"). Palette viridisLite::viridis(). show_density_plot logical (default = TRUE). Also emit base filled.contour. show_plots logical (default = FALSE). TRUE, prints patchwork ggplots. seed integer NULL. Optional RNG seed.","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Trait Space: per-trait similarity + community dispersion — compute_trait_space","text":"list (present elements depend flags): similarity: data.frame columns Trait, Similarity (0-100). dispersion: list containing distance_matrix, hc, pcoa, scores, centroid, metrics_df, plots (ggplots: $dend, $density_gg, $centrality_hist, $metrics_bar).","code":""},{"path":"https://macsands.github.io/invasimap/reference/compute_trait_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Trait Space: per-trait similarity + community dispersion — compute_trait_space","text":"","code":"# Simulate a small mixed-type table set.seed(123) n <- 20 trait_df <- data.frame(   species = paste0(\"sp_\", seq_len(n)),   height = rnorm(n),   mass = runif(n, -1, 1),   rank = factor(sample(1:3, n, TRUE), ordered = TRUE),   bin = factor(sample(c(0, 1), n, TRUE)),   cat = factor(sample(LETTERS[1:4], n, TRUE)),   check.names = FALSE ) abundance <- rexp(n)  out <- compute_trait_space(trait_df,   species_col = \"species\", abundance = abundance,   k = 3, pcoa_dims = 2, show_density_plot = FALSE ) out$similarity #>    Trait Similarity #> 1 height   70.29966 #> 2   mass   64.59100 #> 3   rank   30.00000 #> 4    bin   47.36842 #> 5    cat   23.15789 out$dispersion$metrics_df #>   Metric     Value #> 1   FDis 0.3150657 #> 2   FRic 0.3730231 #> 3   RaoQ 0.1981680"},{"path":"https://macsands.github.io/invasimap/reference/get_trait_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape and Analyze Wikipedia & Trait Data for a Species — get_trait_data","title":"Scrape and Analyze Wikipedia & Trait Data for a Species — get_trait_data","text":"Given binomial species name, function retrieves optional metadata Wikipedia (taxonomic summary, taxonomy, image, color palette) joins relevant plant/trait data TRY-style user-provided trait table. Fuzzy matching used TRY local tables handle minor spelling naming mismatches.","code":""},{"path":"https://macsands.github.io/invasimap/reference/get_trait_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape and Analyze Wikipedia & Trait Data for a Species — get_trait_data","text":"","code":"get_trait_data(   species,   remove_bg = FALSE,   do_palette = TRUE,   do_taxonomy = TRUE,   do_summary = TRUE,   do_image = TRUE,   bg_thresh = 80,   green_delta = 20,   n_palette = 5,   preview = FALSE,   save_folder = NULL,   use_try = FALSE,   try_data = NULL,   trait_species_col = \"AccSpeciesName\",   local_trait_df = NULL,   local_species_col = \"species\",   max_dist = 1 )"},{"path":"https://macsands.github.io/invasimap/reference/get_trait_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape and Analyze Wikipedia & Trait Data for a Species — get_trait_data","text":"species Character. Species name (binomial, e.g. \"Acacia karroo\"). remove_bg Logical. Remove green/white backgrounds Wikipedia image? (default: TRUE) do_palette, do_taxonomy, do_summary, do_image Logical. Control metadata scrape (default: TRUE ). bg_thresh Integer. Brightness threshold white background removal (default: 80). green_delta Integer. much greener \"green\" R/B? (default: 20). n_palette Integer. Number colors extract palette (default: 5). preview Logical. Show image processing? (default: TRUE) save_folder Character NULL. non-NULL, save processed PNG image . use_try Logical. TRUE, join plant traits using TRY-format database/table (default: FALSE). try_data Character (path) data.frame. Path TRY file, data frame containing trait data. trait_species_col Name species column TRY trait table (default: \"AccSpeciesName\"). local_trait_df Optional. Data.frame local trait data (can species-trait table). local_species_col Name species column local trait table (default: \"species\"). max_dist Numeric. Maximum distance fuzzy join (Levenshtein/Jaro-Winkler; default: 1).","code":""},{"path":"https://macsands.github.io/invasimap/reference/get_trait_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape and Analyze Wikipedia & Trait Data for a Species — get_trait_data","text":"tibble (one row) columns: species, optional metadata, trait columns found.","code":""},{"path":"https://macsands.github.io/invasimap/reference/get_trait_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scrape and Analyze Wikipedia & Trait Data for a Species — get_trait_data","text":"TRY tables, TraitName used wide trait columns. local tables, columns except species column returned. Fuzzy matching used allow spelling formatting mismatches. Image-based color palette extraction uses simple k-means clustering; backgrounds can removed using color threshold. Requires: dplyr, purrr, tibble, optionally fuzzyjoin, rvest, httr, stringr, jsonlite, magick, abind. can control metadata scraped speed.","code":""},{"path":"https://macsands.github.io/invasimap/reference/get_trait_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrape and Analyze Wikipedia & Trait Data for a Species — get_trait_data","text":"","code":"if (FALSE) { # \\dontrun{ # Example using TRY table: get_trait_data(\"Acacia karroo\", use_try = TRUE, try_data = try_traits, trait_species_col = \"SpeciesName\")  # Example using local trait table: get_trait_data(\"Acraea horta\", local_trait_df = traits, local_species_col = \"species\")  # Scrape only metadata (no traits): get_trait_data(\"Acacia karroo\", use_try = FALSE) } # }"},{"path":"https://macsands.github.io/invasimap/reference/predict_invader_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict site-level responses for residents and simulated invaders — predict_invader_response","title":"Predict site-level responses for residents and simulated invaders — predict_invader_response","text":"Builds complete site × species prediction grid crossing species-trait table (residents + simulated invaders) site-environment table, calls fitted model’s predict() obtain expected responses (e.g., abundance). function robust factor level issues mirrors typical expand_grid() + left-join workflow.","code":""},{"path":"https://macsands.github.io/invasimap/reference/predict_invader_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict site-level responses for residents and simulated invaders — predict_invader_response","text":"","code":"predict_invader_response(   model,   species_traits,   site_env,   species_col = \"species\",   site_col = \"site_id\",   response_type = \"response\",   include_random = FALSE,   site_aug = NULL,   species_aug = NULL )"},{"path":"https://macsands.github.io/invasimap/reference/predict_invader_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict site-level responses for residents and simulated invaders — predict_invader_response","text":"model Fitted model object (glmmTMB, lme4, mgcv, base stats). species_traits data.frame. Species traits (one row per species) containing species_col trait variables referenced model’s fixed effects. site_env data.frame. Site predictors (one row per site) containing site_col environmental variables referenced model’s fixed effects. species_col character. Species ID column species_traits. Default \"species\". site_col character. Site ID column site_env. Default \"site_id\". response_type character. Prediction scale predict() applicable (e.g., \"response\" \"link\"). Default \"response\". include_random logical. FALSE (default), compute population-level predictions (exclude random effects). TRUE, compute conditional predictions (include random effects; allow new levels supported). site_aug NULL data.frame. Optional site-level augmentation table (must contain site_col) left-joined site_env prediction. species_aug NULL data.frame. Optional species-level augmentation table (must contain species_col) left-joined species_traits.","code":""},{"path":"https://macsands.github.io/invasimap/reference/predict_invader_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict site-level responses for residents and simulated invaders — predict_invader_response","text":"list : newdata: site × species table used predict(). predictions: long table columns site_col, species_col, pred. prediction_matrix: wide matrix (sites × species) predicted values (rows ordered site ID, columns species ID).","code":""},{"path":"https://macsands.github.io/invasimap/reference/predict_invader_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict site-level responses for residents and simulated invaders — predict_invader_response","text":"Model classes supported glmmTMB: uses type re.form. Population-level predictions set re.form = ~ 0 (default, include_random = FALSE); conditional predictions use re.form = NULL allow.new.levels = TRUE. lme4::merMod (lmer/glmer): population-level uses re.form = NA; conditional uses re.form = NULL allow.new.levels = TRUE. mgcv::gam: passes type (e.g., \"response\"). stats::glm / stats::lm: standard predict(); type GLM, none LM. population-level predictions default? novel invaders, random-effect levels (e.g., species/site intercepts) unknown. Excluding random effects yields fixed-effects expectations driven traits, environments, interactions — appropriate invasion screening ranking. Augmentation inputs. site_aug /species_aug let add extra predictors (e.g., obs_sum, spp_rich) prior prediction, replicating common left_join() pattern used analysis notebooks.","code":""},{"path":[]},{"path":"https://macsands.github.io/invasimap/reference/predict_invader_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict site-level responses for residents and simulated invaders — predict_invader_response","text":"","code":"if (FALSE) { # \\dontrun{ # Residents + invaders (traits), sites (env), fitted Tweedie glmmTMB model: all_traits <- rbind(spp_trait, inv_traits) out <- predict_invader_response(   model          = mod,   species_traits = all_traits,   site_env       = site_env,   species_col    = \"species\",   site_col       = \"site_id\",   response_type  = \"response\",   include_random = FALSE, # population-level   site_aug       = dplyr::select(spp_rich_obs, site_id, obs_sum, spp_rich) ) head(out$predictions) dim(out$prediction_matrix) } # }"},{"path":"https://macsands.github.io/invasimap/reference/simulate_invaders.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate hypothetical invader trait profiles from a resident trait pool — simulate_invaders","title":"Simulate hypothetical invader trait profiles from a resident trait pool — simulate_invaders","text":"Generates trait rows hypothetical invaders resampling empirical distribution resident traits. Row names set invader IDs.","code":""},{"path":"https://macsands.github.io/invasimap/reference/simulate_invaders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate hypothetical invader trait profiles from a resident trait pool — simulate_invaders","text":"","code":"simulate_invaders(   resident_traits,   n_inv = 10,   species_col = \"species\",   trait_cols = NULL,   mode = c(\"columnwise\", \"rowwise\"),   numeric_method = c(\"bootstrap\", \"normal\", \"uniform\"),   keep_bounds = TRUE,   inv_prefix = \"inv\",   keep_species_column = TRUE,   seed = NULL )"},{"path":"https://macsands.github.io/invasimap/reference/simulate_invaders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate hypothetical invader trait profiles from a resident trait pool — simulate_invaders","text":"resident_traits data.frame species ID column trait columns. n_inv integer; number invaders simulate. species_col character; species ID column name resident_traits. trait_cols NULL character; trait columns use (default: except species_col). mode \"columnwise\" (new combinations; default) \"rowwise\" (preserve covariance). numeric_method columnwise numeric traits: \"bootstrap\" (default), \"normal\", \"uniform\". keep_bounds logical; constrain normal/uniform draws observed min,max (default TRUE). inv_prefix character; prefix invader IDs (default \"inv\"). keep_species_column logical; keep species ID column setting row names (default TRUE). seed NULL integer; RNG seed.","code":""},{"path":"https://macsands.github.io/invasimap/reference/simulate_invaders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate hypothetical invader trait profiles from a resident trait pool — simulate_invaders","text":"data.frame simulated invaders row names == species IDs.","code":""},{"path":"https://macsands.github.io/invasimap/news/index.html","id":"invasimap-development-version","dir":"Changelog","previous_headings":"","what":"invasimap (development version)","title":"invasimap (development version)","text":"Initial CRAN submission.","code":""}]
